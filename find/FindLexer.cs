//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 ./find/Find.g 2012-12-26 13:15:50

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  find 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class FindLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int AND=4;
	public const int DEPTH=5;
	public const int EQ=6;
	public const int ESC=7;
	public const int HEX_DIGIT=8;
	public const int INAME=9;
	public const int INTEGER=10;
	public const int IREGEX=11;
	public const int LPAREN=12;
	public const int NAME=13;
	public const int NOT=14;
	public const int OR=15;
	public const int REGEX=16;
	public const int RPAREN=17;
	public const int SIZE=18;
	public const int STRING_LITERAL=19;
	public const int TYPE=20;
	public const int UNQOTED_LITERAL=21;
	public const int WS=22;

    // delegates
    // delegators

	public FindLexer()
	{
		OnCreated();
	}

	public FindLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public FindLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "./find/Find.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__23();
	partial void LeaveRule_T__23();

	// $ANTLR start "T__23"
	[GrammarRule("T__23")]
	private void mT__23()
	{
		EnterRule_T__23();
		EnterRule("T__23", 1);
		TraceIn("T__23", 1);
		try
		{
			int _type = T__23;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:9:7: ( 'G' )
			DebugEnterAlt(1);
			// ./find/Find.g:9:9: 'G'
			{
			DebugLocation(9, 9);
			Match('G'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__23", 1);
			LeaveRule("T__23", 1);
			LeaveRule_T__23();
		}
	}
	// $ANTLR end "T__23"

	partial void EnterRule_T__24();
	partial void LeaveRule_T__24();

	// $ANTLR start "T__24"
	[GrammarRule("T__24")]
	private void mT__24()
	{
		EnterRule_T__24();
		EnterRule("T__24", 2);
		TraceIn("T__24", 2);
		try
		{
			int _type = T__24;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:10:7: ( 'M' )
			DebugEnterAlt(1);
			// ./find/Find.g:10:9: 'M'
			{
			DebugLocation(10, 9);
			Match('M'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__24", 2);
			LeaveRule("T__24", 2);
			LeaveRule_T__24();
		}
	}
	// $ANTLR end "T__24"

	partial void EnterRule_T__25();
	partial void LeaveRule_T__25();

	// $ANTLR start "T__25"
	[GrammarRule("T__25")]
	private void mT__25()
	{
		EnterRule_T__25();
		EnterRule("T__25", 3);
		TraceIn("T__25", 3);
		try
		{
			int _type = T__25;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:11:7: ( 'b' )
			DebugEnterAlt(1);
			// ./find/Find.g:11:9: 'b'
			{
			DebugLocation(11, 9);
			Match('b'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__25", 3);
			LeaveRule("T__25", 3);
			LeaveRule_T__25();
		}
	}
	// $ANTLR end "T__25"

	partial void EnterRule_T__26();
	partial void LeaveRule_T__26();

	// $ANTLR start "T__26"
	[GrammarRule("T__26")]
	private void mT__26()
	{
		EnterRule_T__26();
		EnterRule("T__26", 4);
		TraceIn("T__26", 4);
		try
		{
			int _type = T__26;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:12:7: ( 'c' )
			DebugEnterAlt(1);
			// ./find/Find.g:12:9: 'c'
			{
			DebugLocation(12, 9);
			Match('c'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__26", 4);
			LeaveRule("T__26", 4);
			LeaveRule_T__26();
		}
	}
	// $ANTLR end "T__26"

	partial void EnterRule_T__27();
	partial void LeaveRule_T__27();

	// $ANTLR start "T__27"
	[GrammarRule("T__27")]
	private void mT__27()
	{
		EnterRule_T__27();
		EnterRule("T__27", 5);
		TraceIn("T__27", 5);
		try
		{
			int _type = T__27;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:13:7: ( 'd' )
			DebugEnterAlt(1);
			// ./find/Find.g:13:9: 'd'
			{
			DebugLocation(13, 9);
			Match('d'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__27", 5);
			LeaveRule("T__27", 5);
			LeaveRule_T__27();
		}
	}
	// $ANTLR end "T__27"

	partial void EnterRule_T__28();
	partial void LeaveRule_T__28();

	// $ANTLR start "T__28"
	[GrammarRule("T__28")]
	private void mT__28()
	{
		EnterRule_T__28();
		EnterRule("T__28", 6);
		TraceIn("T__28", 6);
		try
		{
			int _type = T__28;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:14:7: ( 'directory' )
			DebugEnterAlt(1);
			// ./find/Find.g:14:9: 'directory'
			{
			DebugLocation(14, 9);
			Match("directory"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__28", 6);
			LeaveRule("T__28", 6);
			LeaveRule_T__28();
		}
	}
	// $ANTLR end "T__28"

	partial void EnterRule_T__29();
	partial void LeaveRule_T__29();

	// $ANTLR start "T__29"
	[GrammarRule("T__29")]
	private void mT__29()
	{
		EnterRule_T__29();
		EnterRule("T__29", 7);
		TraceIn("T__29", 7);
		try
		{
			int _type = T__29;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:15:7: ( 'f' )
			DebugEnterAlt(1);
			// ./find/Find.g:15:9: 'f'
			{
			DebugLocation(15, 9);
			Match('f'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__29", 7);
			LeaveRule("T__29", 7);
			LeaveRule_T__29();
		}
	}
	// $ANTLR end "T__29"

	partial void EnterRule_T__30();
	partial void LeaveRule_T__30();

	// $ANTLR start "T__30"
	[GrammarRule("T__30")]
	private void mT__30()
	{
		EnterRule_T__30();
		EnterRule("T__30", 8);
		TraceIn("T__30", 8);
		try
		{
			int _type = T__30;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:16:7: ( 'file' )
			DebugEnterAlt(1);
			// ./find/Find.g:16:9: 'file'
			{
			DebugLocation(16, 9);
			Match("file"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__30", 8);
			LeaveRule("T__30", 8);
			LeaveRule_T__30();
		}
	}
	// $ANTLR end "T__30"

	partial void EnterRule_T__31();
	partial void LeaveRule_T__31();

	// $ANTLR start "T__31"
	[GrammarRule("T__31")]
	private void mT__31()
	{
		EnterRule_T__31();
		EnterRule("T__31", 9);
		TraceIn("T__31", 9);
		try
		{
			int _type = T__31;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:17:7: ( 'k' )
			DebugEnterAlt(1);
			// ./find/Find.g:17:9: 'k'
			{
			DebugLocation(17, 9);
			Match('k'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__31", 9);
			LeaveRule("T__31", 9);
			LeaveRule_T__31();
		}
	}
	// $ANTLR end "T__31"

	partial void EnterRule_T__32();
	partial void LeaveRule_T__32();

	// $ANTLR start "T__32"
	[GrammarRule("T__32")]
	private void mT__32()
	{
		EnterRule_T__32();
		EnterRule("T__32", 10);
		TraceIn("T__32", 10);
		try
		{
			int _type = T__32;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:18:7: ( 'w' )
			DebugEnterAlt(1);
			// ./find/Find.g:18:9: 'w'
			{
			DebugLocation(18, 9);
			Match('w'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__32", 10);
			LeaveRule("T__32", 10);
			LeaveRule_T__32();
		}
	}
	// $ANTLR end "T__32"

	partial void EnterRule_NAME();
	partial void LeaveRule_NAME();

	// $ANTLR start "NAME"
	[GrammarRule("NAME")]
	private void mNAME()
	{
		EnterRule_NAME();
		EnterRule("NAME", 11);
		TraceIn("NAME", 11);
		try
		{
			int _type = NAME;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:46:5: ( '-name' )
			DebugEnterAlt(1);
			// ./find/Find.g:46:6: '-name'
			{
			DebugLocation(46, 6);
			Match("-name"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NAME", 11);
			LeaveRule("NAME", 11);
			LeaveRule_NAME();
		}
	}
	// $ANTLR end "NAME"

	partial void EnterRule_INAME();
	partial void LeaveRule_INAME();

	// $ANTLR start "INAME"
	[GrammarRule("INAME")]
	private void mINAME()
	{
		EnterRule_INAME();
		EnterRule("INAME", 12);
		TraceIn("INAME", 12);
		try
		{
			int _type = INAME;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:47:6: ( '-iname' )
			DebugEnterAlt(1);
			// ./find/Find.g:47:7: '-iname'
			{
			DebugLocation(47, 7);
			Match("-iname"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INAME", 12);
			LeaveRule("INAME", 12);
			LeaveRule_INAME();
		}
	}
	// $ANTLR end "INAME"

	partial void EnterRule_REGEX();
	partial void LeaveRule_REGEX();

	// $ANTLR start "REGEX"
	[GrammarRule("REGEX")]
	private void mREGEX()
	{
		EnterRule_REGEX();
		EnterRule("REGEX", 13);
		TraceIn("REGEX", 13);
		try
		{
			int _type = REGEX;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:48:6: ( '-regex' )
			DebugEnterAlt(1);
			// ./find/Find.g:48:7: '-regex'
			{
			DebugLocation(48, 7);
			Match("-regex"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("REGEX", 13);
			LeaveRule("REGEX", 13);
			LeaveRule_REGEX();
		}
	}
	// $ANTLR end "REGEX"

	partial void EnterRule_IREGEX();
	partial void LeaveRule_IREGEX();

	// $ANTLR start "IREGEX"
	[GrammarRule("IREGEX")]
	private void mIREGEX()
	{
		EnterRule_IREGEX();
		EnterRule("IREGEX", 14);
		TraceIn("IREGEX", 14);
		try
		{
			int _type = IREGEX;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:49:7: ( '-iregex' )
			DebugEnterAlt(1);
			// ./find/Find.g:49:8: '-iregex'
			{
			DebugLocation(49, 8);
			Match("-iregex"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IREGEX", 14);
			LeaveRule("IREGEX", 14);
			LeaveRule_IREGEX();
		}
	}
	// $ANTLR end "IREGEX"

	partial void EnterRule_TYPE();
	partial void LeaveRule_TYPE();

	// $ANTLR start "TYPE"
	[GrammarRule("TYPE")]
	private void mTYPE()
	{
		EnterRule_TYPE();
		EnterRule("TYPE", 15);
		TraceIn("TYPE", 15);
		try
		{
			int _type = TYPE;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:50:5: ( '-type' )
			DebugEnterAlt(1);
			// ./find/Find.g:50:6: '-type'
			{
			DebugLocation(50, 6);
			Match("-type"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TYPE", 15);
			LeaveRule("TYPE", 15);
			LeaveRule_TYPE();
		}
	}
	// $ANTLR end "TYPE"

	partial void EnterRule_SIZE();
	partial void LeaveRule_SIZE();

	// $ANTLR start "SIZE"
	[GrammarRule("SIZE")]
	private void mSIZE()
	{
		EnterRule_SIZE();
		EnterRule("SIZE", 16);
		TraceIn("SIZE", 16);
		try
		{
			int _type = SIZE;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:51:5: ( '-size' )
			DebugEnterAlt(1);
			// ./find/Find.g:51:6: '-size'
			{
			DebugLocation(51, 6);
			Match("-size"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SIZE", 16);
			LeaveRule("SIZE", 16);
			LeaveRule_SIZE();
		}
	}
	// $ANTLR end "SIZE"

	partial void EnterRule_DEPTH();
	partial void LeaveRule_DEPTH();

	// $ANTLR start "DEPTH"
	[GrammarRule("DEPTH")]
	private void mDEPTH()
	{
		EnterRule_DEPTH();
		EnterRule("DEPTH", 17);
		TraceIn("DEPTH", 17);
		try
		{
			int _type = DEPTH;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:52:6: ( '-depth' )
			DebugEnterAlt(1);
			// ./find/Find.g:52:7: '-depth'
			{
			DebugLocation(52, 7);
			Match("-depth"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DEPTH", 17);
			LeaveRule("DEPTH", 17);
			LeaveRule_DEPTH();
		}
	}
	// $ANTLR end "DEPTH"

	partial void EnterRule_LPAREN();
	partial void LeaveRule_LPAREN();

	// $ANTLR start "LPAREN"
	[GrammarRule("LPAREN")]
	private void mLPAREN()
	{
		EnterRule_LPAREN();
		EnterRule("LPAREN", 18);
		TraceIn("LPAREN", 18);
		try
		{
			int _type = LPAREN;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:53:7: ( '-(' )
			DebugEnterAlt(1);
			// ./find/Find.g:53:9: '-('
			{
			DebugLocation(53, 9);
			Match("-("); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LPAREN", 18);
			LeaveRule("LPAREN", 18);
			LeaveRule_LPAREN();
		}
	}
	// $ANTLR end "LPAREN"

	partial void EnterRule_RPAREN();
	partial void LeaveRule_RPAREN();

	// $ANTLR start "RPAREN"
	[GrammarRule("RPAREN")]
	private void mRPAREN()
	{
		EnterRule_RPAREN();
		EnterRule("RPAREN", 19);
		TraceIn("RPAREN", 19);
		try
		{
			int _type = RPAREN;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:54:7: ( '-)' )
			DebugEnterAlt(1);
			// ./find/Find.g:54:10: '-)'
			{
			DebugLocation(54, 10);
			Match("-)"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RPAREN", 19);
			LeaveRule("RPAREN", 19);
			LeaveRule_RPAREN();
		}
	}
	// $ANTLR end "RPAREN"

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 20);
		TraceIn("AND", 20);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:55:4: ( '-AND' | '-and' | '-&&' )
			int alt1=3;
			try { DebugEnterDecision(1, false);
			int LA1_0 = input.LA(1);

			if ((LA1_0=='-'))
			{
				switch (input.LA(2))
				{
				case 'A':
					{
					alt1 = 1;
					}
					break;
				case 'a':
					{
					alt1 = 2;
					}
					break;
				case '&':
					{
					alt1 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 1, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 1, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// ./find/Find.g:55:7: '-AND'
				{
				DebugLocation(55, 7);
				Match("-AND"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ./find/Find.g:55:15: '-and'
				{
				DebugLocation(55, 15);
				Match("-and"); 


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ./find/Find.g:55:24: '-&&'
				{
				DebugLocation(55, 24);
				Match("-&&"); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 20);
			LeaveRule("AND", 20);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 21);
		TraceIn("OR", 21);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:56:3: ( '-OR' | '-or' | '-||' )
			int alt2=3;
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0=='-'))
			{
				switch (input.LA(2))
				{
				case 'O':
					{
					alt2 = 1;
					}
					break;
				case 'o':
					{
					alt2 = 2;
					}
					break;
				case '|':
					{
					alt2 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 2, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// ./find/Find.g:56:6: '-OR'
				{
				DebugLocation(56, 6);
				Match("-OR"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ./find/Find.g:56:14: '-or'
				{
				DebugLocation(56, 14);
				Match("-or"); 


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ./find/Find.g:56:21: '-||'
				{
				DebugLocation(56, 21);
				Match("-||"); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 21);
			LeaveRule("OR", 21);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_NOT();
	partial void LeaveRule_NOT();

	// $ANTLR start "NOT"
	[GrammarRule("NOT")]
	private void mNOT()
	{
		EnterRule_NOT();
		EnterRule("NOT", 22);
		TraceIn("NOT", 22);
		try
		{
			int _type = NOT;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:57:5: ( '-!' | '-NOT' | '-not' )
			int alt3=3;
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if ((LA3_0=='-'))
			{
				switch (input.LA(2))
				{
				case '!':
					{
					alt3 = 1;
					}
					break;
				case 'N':
					{
					alt3 = 2;
					}
					break;
				case 'n':
					{
					alt3 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 3, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 3, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// ./find/Find.g:57:8: '-!'
				{
				DebugLocation(57, 8);
				Match("-!"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ./find/Find.g:57:15: '-NOT'
				{
				DebugLocation(57, 15);
				Match("-NOT"); 


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ./find/Find.g:57:24: '-not'
				{
				DebugLocation(57, 24);
				Match("-not"); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT", 22);
			LeaveRule("NOT", 22);
			LeaveRule_NOT();
		}
	}
	// $ANTLR end "NOT"

	partial void EnterRule_INTEGER();
	partial void LeaveRule_INTEGER();

	// $ANTLR start "INTEGER"
	[GrammarRule("INTEGER")]
	private void mINTEGER()
	{
		EnterRule_INTEGER();
		EnterRule("INTEGER", 23);
		TraceIn("INTEGER", 23);
		try
		{
			int _type = INTEGER;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:58:8: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// ./find/Find.g:58:10: ( '0' .. '9' )+
			{
			DebugLocation(58, 10);
			// ./find/Find.g:58:10: ( '0' .. '9' )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if (((LA4_0>='0' && LA4_0<='9')))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// ./find/Find.g:
					{
					DebugLocation(58, 10);
					input.Consume();


					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INTEGER", 23);
			LeaveRule("INTEGER", 23);
			LeaveRule_INTEGER();
		}
	}
	// $ANTLR end "INTEGER"

	partial void EnterRule_STRING_LITERAL();
	partial void LeaveRule_STRING_LITERAL();

	// $ANTLR start "STRING_LITERAL"
	[GrammarRule("STRING_LITERAL")]
	private void mSTRING_LITERAL()
	{
		EnterRule_STRING_LITERAL();
		EnterRule("STRING_LITERAL", 24);
		TraceIn("STRING_LITERAL", 24);
		try
		{
			int _type = STRING_LITERAL;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:60:2: ( '\"' ( ESC |~ ( '\"' | '\\\\' | '\\n' | '\\r' ) )* '\"' )
			DebugEnterAlt(1);
			// ./find/Find.g:60:4: '\"' ( ESC |~ ( '\"' | '\\\\' | '\\n' | '\\r' ) )* '\"'
			{
			DebugLocation(60, 4);
			Match('\"'); 
			DebugLocation(60, 8);
			// ./find/Find.g:60:8: ( ESC |~ ( '\"' | '\\\\' | '\\n' | '\\r' ) )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=3;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0=='\\'))
				{
					alt5 = 1;
				}
				else if (((LA5_0>='\u0000' && LA5_0<='\t')||(LA5_0>='\u000B' && LA5_0<='\f')||(LA5_0>='\u000E' && LA5_0<='!')||(LA5_0>='#' && LA5_0<='[')||(LA5_0>=']' && LA5_0<='\uFFFF')))
				{
					alt5 = 2;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// ./find/Find.g:60:9: ESC
					{
					DebugLocation(60, 9);
					mESC(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ./find/Find.g:60:13: ~ ( '\"' | '\\\\' | '\\n' | '\\r' )
					{
					DebugLocation(60, 13);
					input.Consume();


					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(60, 37);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING_LITERAL", 24);
			LeaveRule("STRING_LITERAL", 24);
			LeaveRule_STRING_LITERAL();
		}
	}
	// $ANTLR end "STRING_LITERAL"

	partial void EnterRule_ESC();
	partial void LeaveRule_ESC();

	// $ANTLR start "ESC"
	[GrammarRule("ESC")]
	protected void mESC()
	{
		EnterRule_ESC();
		EnterRule("ESC", 25);
		TraceIn("ESC", 25);
		try
		{
			int _type = ESC;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:73:2: ( '\\\\' ( 'n' | 'r' | 't' | 'b' | 'f' | '\"' | '\\'' | '\\\\' | ( 'u' )+ HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT | '0' .. '3' ( '0' .. '7' ( '0' .. '7' )? )? | '4' .. '7' ( '0' .. '7' )? ) )
			DebugEnterAlt(1);
			// ./find/Find.g:73:4: '\\\\' ( 'n' | 'r' | 't' | 'b' | 'f' | '\"' | '\\'' | '\\\\' | ( 'u' )+ HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT | '0' .. '3' ( '0' .. '7' ( '0' .. '7' )? )? | '4' .. '7' ( '0' .. '7' )? )
			{
			DebugLocation(73, 4);
			Match('\\'); 
			DebugLocation(74, 3);
			// ./find/Find.g:74:3: ( 'n' | 'r' | 't' | 'b' | 'f' | '\"' | '\\'' | '\\\\' | ( 'u' )+ HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT | '0' .. '3' ( '0' .. '7' ( '0' .. '7' )? )? | '4' .. '7' ( '0' .. '7' )? )
			int alt10=11;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			switch (input.LA(1))
			{
			case 'n':
				{
				alt10 = 1;
				}
				break;
			case 'r':
				{
				alt10 = 2;
				}
				break;
			case 't':
				{
				alt10 = 3;
				}
				break;
			case 'b':
				{
				alt10 = 4;
				}
				break;
			case 'f':
				{
				alt10 = 5;
				}
				break;
			case '\"':
				{
				alt10 = 6;
				}
				break;
			case '\'':
				{
				alt10 = 7;
				}
				break;
			case '\\':
				{
				alt10 = 8;
				}
				break;
			case 'u':
				{
				alt10 = 9;
				}
				break;
			case '0':
			case '1':
			case '2':
			case '3':
				{
				alt10 = 10;
				}
				break;
			case '4':
			case '5':
			case '6':
			case '7':
				{
				alt10 = 11;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// ./find/Find.g:74:5: 'n'
				{
				DebugLocation(74, 5);
				Match('n'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ./find/Find.g:75:5: 'r'
				{
				DebugLocation(75, 5);
				Match('r'); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ./find/Find.g:76:5: 't'
				{
				DebugLocation(76, 5);
				Match('t'); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ./find/Find.g:77:5: 'b'
				{
				DebugLocation(77, 5);
				Match('b'); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ./find/Find.g:78:5: 'f'
				{
				DebugLocation(78, 5);
				Match('f'); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ./find/Find.g:79:5: '\"'
				{
				DebugLocation(79, 5);
				Match('\"'); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ./find/Find.g:80:5: '\\''
				{
				DebugLocation(80, 5);
				Match('\''); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// ./find/Find.g:81:5: '\\\\'
				{
				DebugLocation(81, 5);
				Match('\\'); 

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// ./find/Find.g:82:5: ( 'u' )+ HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
				{
				DebugLocation(82, 5);
				// ./find/Find.g:82:5: ( 'u' )+
				int cnt6=0;
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if ((LA6_0=='u'))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// ./find/Find.g:82:6: 'u'
						{
						DebugLocation(82, 6);
						Match('u'); 

						}
						break;

					default:
						if (cnt6 >= 1)
							goto loop6;

						EarlyExitException eee6 = new EarlyExitException( 6, input );
						DebugRecognitionException(eee6);
						throw eee6;
					}
					cnt6++;
				}
				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(82, 12);
				mHEX_DIGIT(); 
				DebugLocation(82, 22);
				mHEX_DIGIT(); 
				DebugLocation(82, 32);
				mHEX_DIGIT(); 
				DebugLocation(82, 42);
				mHEX_DIGIT(); 

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// ./find/Find.g:83:5: '0' .. '3' ( '0' .. '7' ( '0' .. '7' )? )?
				{
				DebugLocation(83, 5);
				MatchRange('0','3'); 
				DebugLocation(84, 4);
				// ./find/Find.g:84:4: ( '0' .. '7' ( '0' .. '7' )? )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if (((LA8_0>='0' && LA8_0<='7')))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// ./find/Find.g:88:6: '0' .. '7' ( '0' .. '7' )?
					{
					DebugLocation(88, 6);
					MatchRange('0','7'); 
					DebugLocation(89, 5);
					// ./find/Find.g:89:5: ( '0' .. '7' )?
					int alt7=2;
					try { DebugEnterSubRule(7);
					try { DebugEnterDecision(7, false);
					int LA7_0 = input.LA(1);

					if (((LA7_0>='0' && LA7_0<='7')))
					{
						alt7 = 1;
					}
					} finally { DebugExitDecision(7); }
					switch (alt7)
					{
					case 1:
						DebugEnterAlt(1);
						// ./find/Find.g:
						{
						DebugLocation(89, 5);
						input.Consume();


						}
						break;

					}
					} finally { DebugExitSubRule(7); }


					}
					break;

				}
				} finally { DebugExitSubRule(8); }


				}
				break;
			case 11:
				DebugEnterAlt(11);
				// ./find/Find.g:96:5: '4' .. '7' ( '0' .. '7' )?
				{
				DebugLocation(96, 5);
				MatchRange('4','7'); 
				DebugLocation(97, 4);
				// ./find/Find.g:97:4: ( '0' .. '7' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if (((LA9_0>='0' && LA9_0<='7')))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// ./find/Find.g:
					{
					DebugLocation(97, 4);
					input.Consume();


					}
					break;

				}
				} finally { DebugExitSubRule(9); }


				}
				break;

			}
			} finally { DebugExitSubRule(10); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ESC", 25);
			LeaveRule("ESC", 25);
			LeaveRule_ESC();
		}
	}
	// $ANTLR end "ESC"

	partial void EnterRule_HEX_DIGIT();
	partial void LeaveRule_HEX_DIGIT();

	// $ANTLR start "HEX_DIGIT"
	[GrammarRule("HEX_DIGIT")]
	protected void mHEX_DIGIT()
	{
		EnterRule_HEX_DIGIT();
		EnterRule("HEX_DIGIT", 26);
		TraceIn("HEX_DIGIT", 26);
		try
		{
			int _type = HEX_DIGIT;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:110:2: ( ( '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' ) )
			DebugEnterAlt(1);
			// ./find/Find.g:
			{
			DebugLocation(110, 2);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("HEX_DIGIT", 26);
			LeaveRule("HEX_DIGIT", 26);
			LeaveRule_HEX_DIGIT();
		}
	}
	// $ANTLR end "HEX_DIGIT"

	partial void EnterRule_UNQOTED_LITERAL();
	partial void LeaveRule_UNQOTED_LITERAL();

	// $ANTLR start "UNQOTED_LITERAL"
	[GrammarRule("UNQOTED_LITERAL")]
	private void mUNQOTED_LITERAL()
	{
		EnterRule_UNQOTED_LITERAL();
		EnterRule("UNQOTED_LITERAL", 27);
		TraceIn("UNQOTED_LITERAL", 27);
		try
		{
			int _type = UNQOTED_LITERAL;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:112:2: ( (~ ( ' ' | '-' | '=' ) )* )
			DebugEnterAlt(1);
			// ./find/Find.g:112:4: (~ ( ' ' | '-' | '=' ) )*
			{
			DebugLocation(112, 4);
			// ./find/Find.g:112:4: (~ ( ' ' | '-' | '=' ) )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if (((LA11_0>='\u0000' && LA11_0<='\u001F')||(LA11_0>='!' && LA11_0<=',')||(LA11_0>='.' && LA11_0<='<')||(LA11_0>='>' && LA11_0<='\uFFFF')))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// ./find/Find.g:
					{
					DebugLocation(112, 4);
					input.Consume();


					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("UNQOTED_LITERAL", 27);
			LeaveRule("UNQOTED_LITERAL", 27);
			LeaveRule_UNQOTED_LITERAL();
		}
	}
	// $ANTLR end "UNQOTED_LITERAL"

	partial void EnterRule_EQ();
	partial void LeaveRule_EQ();

	// $ANTLR start "EQ"
	[GrammarRule("EQ")]
	private void mEQ()
	{
		EnterRule_EQ();
		EnterRule("EQ", 28);
		TraceIn("EQ", 28);
		try
		{
			int _type = EQ;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:113:4: ( '=' )
			DebugEnterAlt(1);
			// ./find/Find.g:113:6: '='
			{
			DebugLocation(113, 6);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQ", 28);
			LeaveRule("EQ", 28);
			LeaveRule_EQ();
		}
	}
	// $ANTLR end "EQ"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 29);
		TraceIn("WS", 29);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:114:4: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ )
			DebugEnterAlt(1);
			// ./find/Find.g:114:6: ( ' ' | '\\t' | '\\r' | '\\n' )+
			{
			DebugLocation(114, 6);
			// ./find/Find.g:114:6: ( ' ' | '\\t' | '\\r' | '\\n' )+
			int cnt12=0;
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if (((LA12_0>='\t' && LA12_0<='\n')||LA12_0=='\r'||LA12_0==' '))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// ./find/Find.g:
					{
					DebugLocation(114, 6);
					input.Consume();


					}
					break;

				default:
					if (cnt12 >= 1)
						goto loop12;

					EarlyExitException eee12 = new EarlyExitException( 12, input );
					DebugRecognitionException(eee12);
					throw eee12;
				}
				cnt12++;
			}
			loop12:
				;

			} finally { DebugExitSubRule(12); }

			DebugLocation(114, 34);
			_channel = Hidden ;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 29);
			LeaveRule("WS", 29);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	public override void mTokens()
	{
		// ./find/Find.g:1:8: ( T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | NAME | INAME | REGEX | IREGEX | TYPE | SIZE | DEPTH | LPAREN | RPAREN | AND | OR | NOT | INTEGER | STRING_LITERAL | ESC | HEX_DIGIT | UNQOTED_LITERAL | EQ | WS )
		int alt13=29;
		try { DebugEnterDecision(13, false);
		try
		{
			alt13 = dfa13.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(13); }
		switch (alt13)
		{
		case 1:
			DebugEnterAlt(1);
			// ./find/Find.g:1:10: T__23
			{
			DebugLocation(1, 10);
			mT__23(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// ./find/Find.g:1:16: T__24
			{
			DebugLocation(1, 16);
			mT__24(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// ./find/Find.g:1:22: T__25
			{
			DebugLocation(1, 22);
			mT__25(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// ./find/Find.g:1:28: T__26
			{
			DebugLocation(1, 28);
			mT__26(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// ./find/Find.g:1:34: T__27
			{
			DebugLocation(1, 34);
			mT__27(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// ./find/Find.g:1:40: T__28
			{
			DebugLocation(1, 40);
			mT__28(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// ./find/Find.g:1:46: T__29
			{
			DebugLocation(1, 46);
			mT__29(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// ./find/Find.g:1:52: T__30
			{
			DebugLocation(1, 52);
			mT__30(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// ./find/Find.g:1:58: T__31
			{
			DebugLocation(1, 58);
			mT__31(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// ./find/Find.g:1:64: T__32
			{
			DebugLocation(1, 64);
			mT__32(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// ./find/Find.g:1:70: NAME
			{
			DebugLocation(1, 70);
			mNAME(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// ./find/Find.g:1:75: INAME
			{
			DebugLocation(1, 75);
			mINAME(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// ./find/Find.g:1:81: REGEX
			{
			DebugLocation(1, 81);
			mREGEX(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// ./find/Find.g:1:87: IREGEX
			{
			DebugLocation(1, 87);
			mIREGEX(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// ./find/Find.g:1:94: TYPE
			{
			DebugLocation(1, 94);
			mTYPE(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// ./find/Find.g:1:99: SIZE
			{
			DebugLocation(1, 99);
			mSIZE(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// ./find/Find.g:1:104: DEPTH
			{
			DebugLocation(1, 104);
			mDEPTH(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// ./find/Find.g:1:110: LPAREN
			{
			DebugLocation(1, 110);
			mLPAREN(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// ./find/Find.g:1:117: RPAREN
			{
			DebugLocation(1, 117);
			mRPAREN(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// ./find/Find.g:1:124: AND
			{
			DebugLocation(1, 124);
			mAND(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// ./find/Find.g:1:128: OR
			{
			DebugLocation(1, 128);
			mOR(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// ./find/Find.g:1:131: NOT
			{
			DebugLocation(1, 131);
			mNOT(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// ./find/Find.g:1:135: INTEGER
			{
			DebugLocation(1, 135);
			mINTEGER(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// ./find/Find.g:1:143: STRING_LITERAL
			{
			DebugLocation(1, 143);
			mSTRING_LITERAL(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// ./find/Find.g:1:158: ESC
			{
			DebugLocation(1, 158);
			mESC(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// ./find/Find.g:1:162: HEX_DIGIT
			{
			DebugLocation(1, 162);
			mHEX_DIGIT(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// ./find/Find.g:1:172: UNQOTED_LITERAL
			{
			DebugLocation(1, 172);
			mUNQOTED_LITERAL(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// ./find/Find.g:1:188: EQ
			{
			DebugLocation(1, 188);
			mEQ(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// ./find/Find.g:1:191: WS
			{
			DebugLocation(1, 191);
			mWS(); 

			}
			break;

		}

	}


	#region DFA
	DFA13 dfa13;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa13 = new DFA13(this, SpecialStateTransition13);
	}

	private class DFA13 : DFA
	{
		private const string DFA13_eotS =
			"\x1\xF\x1\x12\x1\x13\x1\x14\x1\x15\x1\x17\x1\x19\x1\x1A\x1\x1B\x1\xFFFF"+
			"\x1\x27\x2\xF\x1\x38\x1\xF\x7\xFFFF\x1\xF\x1\xFFFF\x1\xF\xF\xFFFF\x1"+
			"\x27\x2\xF\x1\x2C\x1\xFFFF\x8\x49\x1\xF\x2\x49\x1\xFFFF\x2\xF\x3\xFFFF"+
			"\xB\xF\x1\xFFFF\x1\xF\x2\x49\x1\xF\x1\x55\x4\xF\x1\x49\x1\xF\x1\xFFFF"+
			"\x5\xF\x1\x49\x3\xF\x1\x60\x1\xFFFF";
		private const string DFA13_eofS =
			"\x61\xFFFF";
		private const string DFA13_minS =
			"\x1\x9\x8\x0\x1\x21\x2\x0\x1\x22\x1\x0\x1\x9\x7\xFFFF\x1\x72\x1\xFFFF"+
			"\x1\x6C\x3\xFFFF\x1\x61\x1\x6E\xA\xFFFF\x1\x0\x1\x22\x2\x0\x1\xFFFF\x8"+
			"\x0\x1\x30\x2\x0\x1\xFFFF\x2\x65\x3\xFFFF\x8\x0\x1\x30\x2\x0\x1\xFFFF"+
			"\x1\x30\x2\x0\x1\x63\x1\x0\x1\x30\x2\x0\x1\x30\x1\x0\x1\x74\x1\xFFFF"+
			"\x1\x30\x1\x0\x1\x30\x1\x6F\x1\x30\x1\x0\x1\x72\x1\x0\x1\x79\x1\x0\x1"+
			"\xFFFF";
		private const string DFA13_maxS =
			"\x1\x77\x8\xFFFF\x1\x7C\x2\xFFFF\x1\x75\x1\xFFFF\x1\x20\x7\xFFFF\x1\x72"+
			"\x1\xFFFF\x1\x6C\x3\xFFFF\x1\x6F\x1\x72\xA\xFFFF\x1\xFFFF\x1\x75\x2\xFFFF"+
			"\x1\xFFFF\x8\xFFFF\x1\x75\x2\xFFFF\x1\xFFFF\x2\x65\x3\xFFFF\x8\xFFFF"+
			"\x1\x75\x2\xFFFF\x1\xFFFF\x1\x66\x2\xFFFF\x1\x63\x1\xFFFF\x1\x66\x2\xFFFF"+
			"\x1\x66\x1\xFFFF\x1\x74\x1\xFFFF\x1\x66\x1\xFFFF\x1\x66\x1\x6F\x1\x66"+
			"\x1\xFFFF\x1\x72\x1\xFFFF\x1\x79\x1\xFFFF\x1\xFFFF";
		private const string DFA13_acceptS =
			"\xF\xFFFF\x1\x1B\x1\x1C\x1\x1D\x1\x1\x1\x2\x1\x3\x1\x4\x1\xFFFF\x1\x5"+
			"\x1\xFFFF\x1\x7\x1\x9\x1\xA\x2\xFFFF\x1\xD\x1\xF\x1\x10\x1\x11\x1\x12"+
			"\x1\x13\x1\x14\x1\x15\x1\x16\x1\x17\x4\xFFFF\x1\x18\xB\xFFFF\x1\x1A\x2"+
			"\xFFFF\x1\xB\x1\xC\x1\xE\xB\xFFFF\x1\x19\xB\xFFFF\x1\x8\xA\xFFFF\x1\x6";
		private const string DFA13_specialS =
			"\x1\xFFFF\x1\x1\x1\xC\x1\xE\x1\x9\x1\x14\x1\x8\x1\x4\x1\x5\x1\xFFFF\x1"+
			"\x1D\x1\x6\x1\xFFFF\x1\x16\x1A\xFFFF\x1\xA\x1\xFFFF\x1\x0\x1\x3\x1\xFFFF"+
			"\x1\x26\x1\x24\x1\x22\x1\x13\x1\x15\x1\x10\x1\x11\x1\xF\x1\xFFFF\x1\x25"+
			"\x1\x23\x6\xFFFF\x1\x2A\x1\x27\x1\x1E\x1\x1C\x1\x21\x1\x1F\x1\x19\x1"+
			"\x18\x1\xFFFF\x1\x28\x1\x2\x2\xFFFF\x1\x20\x1\x17\x1\xFFFF\x1\x1A\x1"+
			"\xFFFF\x1\x29\x1\xB\x1\xFFFF\x1\x7\x3\xFFFF\x1\xD\x3\xFFFF\x1\x1B\x1"+
			"\xFFFF\x1\x2B\x1\xFFFF\x1\x12\x1\xFFFF}>";
		private static readonly string[] DFA13_transitionS =
			{
				"\x2\xE\x2\xFFFF\x1\xE\x12\xFFFF\x1\x11\x1\xFFFF\x1\xB\xA\xFFFF\x1\x9"+
				"\x2\xFFFF\xA\xA\x3\xFFFF\x1\x10\x3\xFFFF\x6\xD\x1\x1\x5\xFFFF\x1\x2"+
				"\xE\xFFFF\x1\xC\x4\xFFFF\x1\xD\x1\x3\x1\x4\x1\x5\x1\xD\x1\x6\x4\xFFFF"+
				"\x1\x7\xB\xFFFF\x1\x8",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\xF\xF\x1\xFFFF\xFFC2\xF",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\xF\xF\x1\xFFFF\xFFC2\xF",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\xF\xF\x1\xFFFF\xFFC2\xF",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\xF\xF\x1\xFFFF\xFFC2\xF",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\xF\xF\x1\xFFFF\x2B\xF\x1\x16\xFF96"+
				"\xF",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\xF\xF\x1\xFFFF\x2B\xF\x1\x18\xFF96"+
				"\xF",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\xF\xF\x1\xFFFF\xFFC2\xF",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\xF\xF\x1\xFFFF\xFFC2\xF",
				"\x1\x26\x4\xFFFF\x1\x24\x1\xFFFF\x1\x22\x1\x23\x17\xFFFF\x1\x24\xC"+
				"\xFFFF\x1\x26\x1\x25\x11\xFFFF\x1\x24\x2\xFFFF\x1\x21\x4\xFFFF\x1\x1D"+
				"\x4\xFFFF\x1\x1C\x1\x25\x2\xFFFF\x1\x1E\x1\x20\x1\x1F\x7\xFFFF\x1\x25",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\x2\xF\xA\x28\x3\xF\x1\xFFFF\xFFC2\xF",
				"\xA\x2A\x1\xFFFF\x2\x2A\x1\xFFFF\x12\x2A\x1\x2C\x1\x2A\x1\x2B\xA\x2A"+
				"\x1\x2C\xF\x2A\x1\x2C\x1E\x2A\x1\x29\xFFA3\x2A",
				"\x1\x32\x4\xFFFF\x1\x33\x8\xFFFF\x4\x36\x4\x37\x24\xFFFF\x1\x34\x5"+
				"\xFFFF\x1\x30\x3\xFFFF\x1\x31\x7\xFFFF\x1\x2D\x3\xFFFF\x1\x2E\x1\xFFFF"+
				"\x1\x2F\x1\x35",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\xF\xF\x1\xFFFF\xFFC2\xF",
				"\x2\xE\x2\xFFFF\x1\xE\x12\xFFFF\x1\x11",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x39",
				"",
				"\x1\x3A",
				"",
				"",
				"",
				"\x1\x3B\xD\xFFFF\x1\x26",
				"\x1\x3C\x3\xFFFF\x1\x3D",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\x2\xF\xA\x28\x3\xF\x1\xFFFF\xFFC2\xF",
				"\x1\x43\x4\xFFFF\x1\x44\x8\xFFFF\x4\x47\x4\x48\x24\xFFFF\x1\x45\x5"+
				"\xFFFF\x1\x41\x3\xFFFF\x1\x42\x7\xFFFF\x1\x3E\x3\xFFFF\x1\x3F\x1\xFFFF"+
				"\x1\x40\x1\x46",
				"\xA\x2A\x1\xFFFF\x2\x2A\x1\xFFFF\x12\x2A\x1\x2C\x1\x2A\x1\x2B\xA\x2A"+
				"\x1\x2C\xF\x2A\x1\x2C\x1E\x2A\x1\x29\xFFA3\x2A",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\xF\xF\x1\xFFFF\xFFC2\xF",
				"",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\xF\xF\x1\xFFFF\xFFC2\xF",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\xF\xF\x1\xFFFF\xFFC2\xF",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\xF\xF\x1\xFFFF\xFFC2\xF",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\xF\xF\x1\xFFFF\xFFC2\xF",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\xF\xF\x1\xFFFF\xFFC2\xF",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\xF\xF\x1\xFFFF\xFFC2\xF",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\xF\xF\x1\xFFFF\xFFC2\xF",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\xF\xF\x1\xFFFF\xFFC2\xF",
				"\xA\x4A\x7\xFFFF\x6\x4A\x1A\xFFFF\x6\x4A\xE\xFFFF\x1\x35",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\x2\xF\x8\x4B\x5\xF\x1\xFFFF\xFFC2\xF",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\x2\xF\x8\x4C\x5\xF\x1\xFFFF\xFFC2\xF",
				"",
				"\x1\x4D",
				"\x1\x4E",
				"",
				"",
				"",
				"\xA\x2A\x1\xFFFF\x2\x2A\x1\xFFFF\x12\x2A\x1\x2C\x1\x2A\x1\x2B\xA\x2A"+
				"\x1\x2C\xF\x2A\x1\x2C\x1E\x2A\x1\x29\xFFA3\x2A",
				"\xA\x2A\x1\xFFFF\x2\x2A\x1\xFFFF\x12\x2A\x1\x2C\x1\x2A\x1\x2B\xA\x2A"+
				"\x1\x2C\xF\x2A\x1\x2C\x1E\x2A\x1\x29\xFFA3\x2A",
				"\xA\x2A\x1\xFFFF\x2\x2A\x1\xFFFF\x12\x2A\x1\x2C\x1\x2A\x1\x2B\xA\x2A"+
				"\x1\x2C\xF\x2A\x1\x2C\x1E\x2A\x1\x29\xFFA3\x2A",
				"\xA\x2A\x1\xFFFF\x2\x2A\x1\xFFFF\x12\x2A\x1\x2C\x1\x2A\x1\x2B\xA\x2A"+
				"\x1\x2C\xF\x2A\x1\x2C\x1E\x2A\x1\x29\xFFA3\x2A",
				"\xA\x2A\x1\xFFFF\x2\x2A\x1\xFFFF\x12\x2A\x1\x2C\x1\x2A\x1\x2B\xA\x2A"+
				"\x1\x2C\xF\x2A\x1\x2C\x1E\x2A\x1\x29\xFFA3\x2A",
				"\xA\x2A\x1\xFFFF\x2\x2A\x1\xFFFF\x12\x2A\x1\x2C\x1\x2A\x1\x2B\xA\x2A"+
				"\x1\x2C\xF\x2A\x1\x2C\x1E\x2A\x1\x29\xFFA3\x2A",
				"\xA\x2A\x1\xFFFF\x2\x2A\x1\xFFFF\x12\x2A\x1\x2C\x1\x2A\x1\x2B\xA\x2A"+
				"\x1\x2C\xF\x2A\x1\x2C\x1E\x2A\x1\x29\xFFA3\x2A",
				"\xA\x2A\x1\xFFFF\x2\x2A\x1\xFFFF\x12\x2A\x1\x2C\x1\x2A\x1\x2B\xA\x2A"+
				"\x1\x2C\xF\x2A\x1\x2C\x1E\x2A\x1\x29\xFFA3\x2A",
				"\xA\x4F\x7\xFFFF\x6\x4F\x1A\xFFFF\x6\x4F\xE\xFFFF\x1\x46",
				"\xA\x2A\x1\xFFFF\x2\x2A\x1\xFFFF\x12\x2A\x1\x2C\x1\x2A\x1\x2B\xA\x2A"+
				"\x1\x2C\x2\x2A\x8\x50\x5\x2A\x1\x2C\x1E\x2A\x1\x29\xFFA3\x2A",
				"\xA\x2A\x1\xFFFF\x2\x2A\x1\xFFFF\x12\x2A\x1\x2C\x1\x2A\x1\x2B\xA\x2A"+
				"\x1\x2C\x2\x2A\x8\x51\x5\x2A\x1\x2C\x1E\x2A\x1\x29\xFFA3\x2A",
				"",
				"\xA\x52\x7\xFFFF\x6\x52\x1A\xFFFF\x6\x52",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\x2\xF\x8\x53\x5\xF\x1\xFFFF\xFFC2\xF",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\xF\xF\x1\xFFFF\xFFC2\xF",
				"\x1\x54",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\xF\xF\x1\xFFFF\xFFC2\xF",
				"\xA\x56\x7\xFFFF\x6\x56\x1A\xFFFF\x6\x56",
				"\xA\x2A\x1\xFFFF\x2\x2A\x1\xFFFF\x12\x2A\x1\x2C\x1\x2A\x1\x2B\xA\x2A"+
				"\x1\x2C\x2\x2A\x8\x57\x5\x2A\x1\x2C\x1E\x2A\x1\x29\xFFA3\x2A",
				"\xA\x2A\x1\xFFFF\x2\x2A\x1\xFFFF\x12\x2A\x1\x2C\x1\x2A\x1\x2B\xA\x2A"+
				"\x1\x2C\xF\x2A\x1\x2C\x1E\x2A\x1\x29\xFFA3\x2A",
				"\xA\x58\x7\xFFFF\x6\x58\x1A\xFFFF\x6\x58",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\xF\xF\x1\xFFFF\xFFC2\xF",
				"\x1\x59",
				"",
				"\xA\x5A\x7\xFFFF\x6\x5A\x1A\xFFFF\x6\x5A",
				"\xA\x2A\x1\xFFFF\x2\x2A\x1\xFFFF\x12\x2A\x1\x2C\x1\x2A\x1\x2B\xA\x2A"+
				"\x1\x2C\xF\x2A\x1\x2C\x1E\x2A\x1\x29\xFFA3\x2A",
				"\xA\x5B\x7\xFFFF\x6\x5B\x1A\xFFFF\x6\x5B",
				"\x1\x5C",
				"\xA\x5D\x7\xFFFF\x6\x5D\x1A\xFFFF\x6\x5D",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\xF\xF\x1\xFFFF\xFFC2\xF",
				"\x1\x5E",
				"\xA\x2A\x1\xFFFF\x2\x2A\x1\xFFFF\x12\x2A\x1\x2C\x1\x2A\x1\x2B\xA\x2A"+
				"\x1\x2C\xF\x2A\x1\x2C\x1E\x2A\x1\x29\xFFA3\x2A",
				"\x1\x5F",
				"\x20\xF\x1\xFFFF\xC\xF\x1\xFFFF\xF\xF\x1\xFFFF\xFFC2\xF",
				""
			};

		private static readonly short[] DFA13_eot = DFA.UnpackEncodedString(DFA13_eotS);
		private static readonly short[] DFA13_eof = DFA.UnpackEncodedString(DFA13_eofS);
		private static readonly char[] DFA13_min = DFA.UnpackEncodedStringToUnsignedChars(DFA13_minS);
		private static readonly char[] DFA13_max = DFA.UnpackEncodedStringToUnsignedChars(DFA13_maxS);
		private static readonly short[] DFA13_accept = DFA.UnpackEncodedString(DFA13_acceptS);
		private static readonly short[] DFA13_special = DFA.UnpackEncodedString(DFA13_specialS);
		private static readonly short[][] DFA13_transition;

		static DFA13()
		{
			int numStates = DFA13_transitionS.Length;
			DFA13_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA13_transition[i] = DFA.UnpackEncodedString(DFA13_transitionS[i]);
			}
		}

		public DFA13( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 13;
			this.eot = DFA13_eot;
			this.eof = DFA13_eof;
			this.min = DFA13_min;
			this.max = DFA13_max;
			this.accept = DFA13_accept;
			this.special = DFA13_special;
			this.transition = DFA13_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | NAME | INAME | REGEX | IREGEX | TYPE | SIZE | DEPTH | LPAREN | RPAREN | AND | OR | NOT | INTEGER | STRING_LITERAL | ESC | HEX_DIGIT | UNQOTED_LITERAL | EQ | WS );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition13(DFA dfa, int s, IIntStream _input)
	{
		IIntStream input = _input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA13_42 = input.LA(1);

				s = -1;
				if ((LA13_42=='\"')) {s = 43;}

				else if ((LA13_42=='\\')) {s = 41;}

				else if (((LA13_42>='\u0000' && LA13_42<='\t')||(LA13_42>='\u000B' && LA13_42<='\f')||(LA13_42>='\u000E' && LA13_42<='\u001F')||LA13_42=='!'||(LA13_42>='#' && LA13_42<=',')||(LA13_42>='.' && LA13_42<='<')||(LA13_42>='>' && LA13_42<='[')||(LA13_42>=']' && LA13_42<='\uFFFF'))) {s = 42;}

				else if ((LA13_42==' '||LA13_42=='-'||LA13_42=='=')) {s = 44;}

				else s = 15;

				if (s >= 0) return s;
				break;

			case 1:
				int LA13_1 = input.LA(1);

				s = -1;
				if (((LA13_1>='\u0000' && LA13_1<='\u001F')||(LA13_1>='!' && LA13_1<=',')||(LA13_1>='.' && LA13_1<='<')||(LA13_1>='>' && LA13_1<='\uFFFF'))) {s = 15;}

				else s = 18;

				if (s >= 0) return s;
				break;

			case 2:
				int LA13_72 = input.LA(1);

				s = -1;
				if (((LA13_72>='0' && LA13_72<='7'))) {s = 81;}

				else if ((LA13_72=='\"')) {s = 43;}

				else if ((LA13_72=='\\')) {s = 41;}

				else if (((LA13_72>='\u0000' && LA13_72<='\t')||(LA13_72>='\u000B' && LA13_72<='\f')||(LA13_72>='\u000E' && LA13_72<='\u001F')||LA13_72=='!'||(LA13_72>='#' && LA13_72<=',')||(LA13_72>='.' && LA13_72<='/')||(LA13_72>='8' && LA13_72<='<')||(LA13_72>='>' && LA13_72<='[')||(LA13_72>=']' && LA13_72<='\uFFFF'))) {s = 42;}

				else if ((LA13_72==' '||LA13_72=='-'||LA13_72=='=')) {s = 44;}

				else s = 15;

				if (s >= 0) return s;
				break;

			case 3:
				int LA13_43 = input.LA(1);

				s = -1;
				if (((LA13_43>='\u0000' && LA13_43<='\u001F')||(LA13_43>='!' && LA13_43<=',')||(LA13_43>='.' && LA13_43<='<')||(LA13_43>='>' && LA13_43<='\uFFFF'))) {s = 15;}

				else s = 44;

				if (s >= 0) return s;
				break;

			case 4:
				int LA13_7 = input.LA(1);

				s = -1;
				if (((LA13_7>='\u0000' && LA13_7<='\u001F')||(LA13_7>='!' && LA13_7<=',')||(LA13_7>='.' && LA13_7<='<')||(LA13_7>='>' && LA13_7<='\uFFFF'))) {s = 15;}

				else s = 26;

				if (s >= 0) return s;
				break;

			case 5:
				int LA13_8 = input.LA(1);

				s = -1;
				if (((LA13_8>='\u0000' && LA13_8<='\u001F')||(LA13_8>='!' && LA13_8<=',')||(LA13_8>='.' && LA13_8<='<')||(LA13_8>='>' && LA13_8<='\uFFFF'))) {s = 15;}

				else s = 27;

				if (s >= 0) return s;
				break;

			case 6:
				int LA13_11 = input.LA(1);

				s = -1;
				if ((LA13_11=='\\')) {s = 41;}

				else if (((LA13_11>='\u0000' && LA13_11<='\t')||(LA13_11>='\u000B' && LA13_11<='\f')||(LA13_11>='\u000E' && LA13_11<='\u001F')||LA13_11=='!'||(LA13_11>='#' && LA13_11<=',')||(LA13_11>='.' && LA13_11<='<')||(LA13_11>='>' && LA13_11<='[')||(LA13_11>=']' && LA13_11<='\uFFFF'))) {s = 42;}

				else if ((LA13_11=='\"')) {s = 43;}

				else if ((LA13_11==' '||LA13_11=='-'||LA13_11=='=')) {s = 44;}

				else s = 15;

				if (s >= 0) return s;
				break;

			case 7:
				int LA13_83 = input.LA(1);

				s = -1;
				if (((LA13_83>='\u0000' && LA13_83<='\u001F')||(LA13_83>='!' && LA13_83<=',')||(LA13_83>='.' && LA13_83<='<')||(LA13_83>='>' && LA13_83<='\uFFFF'))) {s = 15;}

				else s = 73;

				if (s >= 0) return s;
				break;

			case 8:
				int LA13_6 = input.LA(1);

				s = -1;
				if ((LA13_6=='i')) {s = 24;}

				else if (((LA13_6>='\u0000' && LA13_6<='\u001F')||(LA13_6>='!' && LA13_6<=',')||(LA13_6>='.' && LA13_6<='<')||(LA13_6>='>' && LA13_6<='h')||(LA13_6>='j' && LA13_6<='\uFFFF'))) {s = 15;}

				else s = 25;

				if (s >= 0) return s;
				break;

			case 9:
				int LA13_4 = input.LA(1);

				s = -1;
				if (((LA13_4>='\u0000' && LA13_4<='\u001F')||(LA13_4>='!' && LA13_4<=',')||(LA13_4>='.' && LA13_4<='<')||(LA13_4>='>' && LA13_4<='\uFFFF'))) {s = 15;}

				else s = 21;

				if (s >= 0) return s;
				break;

			case 10:
				int LA13_40 = input.LA(1);

				s = -1;
				if (((LA13_40>='0' && LA13_40<='9'))) {s = 40;}

				else if (((LA13_40>='\u0000' && LA13_40<='\u001F')||(LA13_40>='!' && LA13_40<=',')||(LA13_40>='.' && LA13_40<='/')||(LA13_40>=':' && LA13_40<='<')||(LA13_40>='>' && LA13_40<='\uFFFF'))) {s = 15;}

				else s = 39;

				if (s >= 0) return s;
				break;

			case 11:
				int LA13_81 = input.LA(1);

				s = -1;
				if ((LA13_81=='\"')) {s = 43;}

				else if ((LA13_81=='\\')) {s = 41;}

				else if (((LA13_81>='\u0000' && LA13_81<='\t')||(LA13_81>='\u000B' && LA13_81<='\f')||(LA13_81>='\u000E' && LA13_81<='\u001F')||LA13_81=='!'||(LA13_81>='#' && LA13_81<=',')||(LA13_81>='.' && LA13_81<='<')||(LA13_81>='>' && LA13_81<='[')||(LA13_81>=']' && LA13_81<='\uFFFF'))) {s = 42;}

				else if ((LA13_81==' '||LA13_81=='-'||LA13_81=='=')) {s = 44;}

				else s = 15;

				if (s >= 0) return s;
				break;

			case 12:
				int LA13_2 = input.LA(1);

				s = -1;
				if (((LA13_2>='\u0000' && LA13_2<='\u001F')||(LA13_2>='!' && LA13_2<=',')||(LA13_2>='.' && LA13_2<='<')||(LA13_2>='>' && LA13_2<='\uFFFF'))) {s = 15;}

				else s = 19;

				if (s >= 0) return s;
				break;

			case 13:
				int LA13_87 = input.LA(1);

				s = -1;
				if ((LA13_87=='\"')) {s = 43;}

				else if ((LA13_87=='\\')) {s = 41;}

				else if (((LA13_87>='\u0000' && LA13_87<='\t')||(LA13_87>='\u000B' && LA13_87<='\f')||(LA13_87>='\u000E' && LA13_87<='\u001F')||LA13_87=='!'||(LA13_87>='#' && LA13_87<=',')||(LA13_87>='.' && LA13_87<='<')||(LA13_87>='>' && LA13_87<='[')||(LA13_87>=']' && LA13_87<='\uFFFF'))) {s = 42;}

				else if ((LA13_87==' '||LA13_87=='-'||LA13_87=='=')) {s = 44;}

				else s = 15;

				if (s >= 0) return s;
				break;

			case 14:
				int LA13_3 = input.LA(1);

				s = -1;
				if (((LA13_3>='\u0000' && LA13_3<='\u001F')||(LA13_3>='!' && LA13_3<=',')||(LA13_3>='.' && LA13_3<='<')||(LA13_3>='>' && LA13_3<='\uFFFF'))) {s = 15;}

				else s = 20;

				if (s >= 0) return s;
				break;

			case 15:
				int LA13_52 = input.LA(1);

				s = -1;
				if (((LA13_52>='\u0000' && LA13_52<='\u001F')||(LA13_52>='!' && LA13_52<=',')||(LA13_52>='.' && LA13_52<='<')||(LA13_52>='>' && LA13_52<='\uFFFF'))) {s = 15;}

				else s = 73;

				if (s >= 0) return s;
				break;

			case 16:
				int LA13_50 = input.LA(1);

				s = -1;
				if (((LA13_50>='\u0000' && LA13_50<='\u001F')||(LA13_50>='!' && LA13_50<=',')||(LA13_50>='.' && LA13_50<='<')||(LA13_50>='>' && LA13_50<='\uFFFF'))) {s = 15;}

				else s = 73;

				if (s >= 0) return s;
				break;

			case 17:
				int LA13_51 = input.LA(1);

				s = -1;
				if (((LA13_51>='\u0000' && LA13_51<='\u001F')||(LA13_51>='!' && LA13_51<=',')||(LA13_51>='.' && LA13_51<='<')||(LA13_51>='>' && LA13_51<='\uFFFF'))) {s = 15;}

				else s = 73;

				if (s >= 0) return s;
				break;

			case 18:
				int LA13_95 = input.LA(1);

				s = -1;
				if (((LA13_95>='\u0000' && LA13_95<='\u001F')||(LA13_95>='!' && LA13_95<=',')||(LA13_95>='.' && LA13_95<='<')||(LA13_95>='>' && LA13_95<='\uFFFF'))) {s = 15;}

				else s = 96;

				if (s >= 0) return s;
				break;

			case 19:
				int LA13_48 = input.LA(1);

				s = -1;
				if (((LA13_48>='\u0000' && LA13_48<='\u001F')||(LA13_48>='!' && LA13_48<=',')||(LA13_48>='.' && LA13_48<='<')||(LA13_48>='>' && LA13_48<='\uFFFF'))) {s = 15;}

				else s = 73;

				if (s >= 0) return s;
				break;

			case 20:
				int LA13_5 = input.LA(1);

				s = -1;
				if ((LA13_5=='i')) {s = 22;}

				else if (((LA13_5>='\u0000' && LA13_5<='\u001F')||(LA13_5>='!' && LA13_5<=',')||(LA13_5>='.' && LA13_5<='<')||(LA13_5>='>' && LA13_5<='h')||(LA13_5>='j' && LA13_5<='\uFFFF'))) {s = 15;}

				else s = 23;

				if (s >= 0) return s;
				break;

			case 21:
				int LA13_49 = input.LA(1);

				s = -1;
				if (((LA13_49>='\u0000' && LA13_49<='\u001F')||(LA13_49>='!' && LA13_49<=',')||(LA13_49>='.' && LA13_49<='<')||(LA13_49>='>' && LA13_49<='\uFFFF'))) {s = 15;}

				else s = 73;

				if (s >= 0) return s;
				break;

			case 22:
				int LA13_13 = input.LA(1);

				s = -1;
				if (((LA13_13>='\u0000' && LA13_13<='\u001F')||(LA13_13>='!' && LA13_13<=',')||(LA13_13>='.' && LA13_13<='<')||(LA13_13>='>' && LA13_13<='\uFFFF'))) {s = 15;}

				else s = 56;

				if (s >= 0) return s;
				break;

			case 23:
				int LA13_76 = input.LA(1);

				s = -1;
				if (((LA13_76>='\u0000' && LA13_76<='\u001F')||(LA13_76>='!' && LA13_76<=',')||(LA13_76>='.' && LA13_76<='<')||(LA13_76>='>' && LA13_76<='\uFFFF'))) {s = 15;}

				else s = 73;

				if (s >= 0) return s;
				break;

			case 24:
				int LA13_69 = input.LA(1);

				s = -1;
				if ((LA13_69=='\"')) {s = 43;}

				else if ((LA13_69=='\\')) {s = 41;}

				else if (((LA13_69>='\u0000' && LA13_69<='\t')||(LA13_69>='\u000B' && LA13_69<='\f')||(LA13_69>='\u000E' && LA13_69<='\u001F')||LA13_69=='!'||(LA13_69>='#' && LA13_69<=',')||(LA13_69>='.' && LA13_69<='<')||(LA13_69>='>' && LA13_69<='[')||(LA13_69>=']' && LA13_69<='\uFFFF'))) {s = 42;}

				else if ((LA13_69==' '||LA13_69=='-'||LA13_69=='=')) {s = 44;}

				else s = 15;

				if (s >= 0) return s;
				break;

			case 25:
				int LA13_68 = input.LA(1);

				s = -1;
				if ((LA13_68=='\"')) {s = 43;}

				else if ((LA13_68=='\\')) {s = 41;}

				else if (((LA13_68>='\u0000' && LA13_68<='\t')||(LA13_68>='\u000B' && LA13_68<='\f')||(LA13_68>='\u000E' && LA13_68<='\u001F')||LA13_68=='!'||(LA13_68>='#' && LA13_68<=',')||(LA13_68>='.' && LA13_68<='<')||(LA13_68>='>' && LA13_68<='[')||(LA13_68>=']' && LA13_68<='\uFFFF'))) {s = 42;}

				else if ((LA13_68==' '||LA13_68=='-'||LA13_68=='=')) {s = 44;}

				else s = 15;

				if (s >= 0) return s;
				break;

			case 26:
				int LA13_78 = input.LA(1);

				s = -1;
				if (((LA13_78>='\u0000' && LA13_78<='\u001F')||(LA13_78>='!' && LA13_78<=',')||(LA13_78>='.' && LA13_78<='<')||(LA13_78>='>' && LA13_78<='\uFFFF'))) {s = 15;}

				else s = 85;

				if (s >= 0) return s;
				break;

			case 27:
				int LA13_91 = input.LA(1);

				s = -1;
				if (((LA13_91>='\u0000' && LA13_91<='\u001F')||(LA13_91>='!' && LA13_91<=',')||(LA13_91>='.' && LA13_91<='<')||(LA13_91>='>' && LA13_91<='\uFFFF'))) {s = 15;}

				else s = 73;

				if (s >= 0) return s;
				break;

			case 28:
				int LA13_65 = input.LA(1);

				s = -1;
				if ((LA13_65=='\"')) {s = 43;}

				else if ((LA13_65=='\\')) {s = 41;}

				else if (((LA13_65>='\u0000' && LA13_65<='\t')||(LA13_65>='\u000B' && LA13_65<='\f')||(LA13_65>='\u000E' && LA13_65<='\u001F')||LA13_65=='!'||(LA13_65>='#' && LA13_65<=',')||(LA13_65>='.' && LA13_65<='<')||(LA13_65>='>' && LA13_65<='[')||(LA13_65>=']' && LA13_65<='\uFFFF'))) {s = 42;}

				else if ((LA13_65==' '||LA13_65=='-'||LA13_65=='=')) {s = 44;}

				else s = 15;

				if (s >= 0) return s;
				break;

			case 29:
				int LA13_10 = input.LA(1);

				s = -1;
				if (((LA13_10>='0' && LA13_10<='9'))) {s = 40;}

				else if (((LA13_10>='\u0000' && LA13_10<='\u001F')||(LA13_10>='!' && LA13_10<=',')||(LA13_10>='.' && LA13_10<='/')||(LA13_10>=':' && LA13_10<='<')||(LA13_10>='>' && LA13_10<='\uFFFF'))) {s = 15;}

				else s = 39;

				if (s >= 0) return s;
				break;

			case 30:
				int LA13_64 = input.LA(1);

				s = -1;
				if ((LA13_64=='\"')) {s = 43;}

				else if ((LA13_64=='\\')) {s = 41;}

				else if (((LA13_64>='\u0000' && LA13_64<='\t')||(LA13_64>='\u000B' && LA13_64<='\f')||(LA13_64>='\u000E' && LA13_64<='\u001F')||LA13_64=='!'||(LA13_64>='#' && LA13_64<=',')||(LA13_64>='.' && LA13_64<='<')||(LA13_64>='>' && LA13_64<='[')||(LA13_64>=']' && LA13_64<='\uFFFF'))) {s = 42;}

				else if ((LA13_64==' '||LA13_64=='-'||LA13_64=='=')) {s = 44;}

				else s = 15;

				if (s >= 0) return s;
				break;

			case 31:
				int LA13_67 = input.LA(1);

				s = -1;
				if ((LA13_67=='\"')) {s = 43;}

				else if ((LA13_67=='\\')) {s = 41;}

				else if (((LA13_67>='\u0000' && LA13_67<='\t')||(LA13_67>='\u000B' && LA13_67<='\f')||(LA13_67>='\u000E' && LA13_67<='\u001F')||LA13_67=='!'||(LA13_67>='#' && LA13_67<=',')||(LA13_67>='.' && LA13_67<='<')||(LA13_67>='>' && LA13_67<='[')||(LA13_67>=']' && LA13_67<='\uFFFF'))) {s = 42;}

				else if ((LA13_67==' '||LA13_67=='-'||LA13_67=='=')) {s = 44;}

				else s = 15;

				if (s >= 0) return s;
				break;

			case 32:
				int LA13_75 = input.LA(1);

				s = -1;
				if (((LA13_75>='0' && LA13_75<='7'))) {s = 83;}

				else if (((LA13_75>='\u0000' && LA13_75<='\u001F')||(LA13_75>='!' && LA13_75<=',')||(LA13_75>='.' && LA13_75<='/')||(LA13_75>='8' && LA13_75<='<')||(LA13_75>='>' && LA13_75<='\uFFFF'))) {s = 15;}

				else s = 73;

				if (s >= 0) return s;
				break;

			case 33:
				int LA13_66 = input.LA(1);

				s = -1;
				if ((LA13_66=='\"')) {s = 43;}

				else if ((LA13_66=='\\')) {s = 41;}

				else if (((LA13_66>='\u0000' && LA13_66<='\t')||(LA13_66>='\u000B' && LA13_66<='\f')||(LA13_66>='\u000E' && LA13_66<='\u001F')||LA13_66=='!'||(LA13_66>='#' && LA13_66<=',')||(LA13_66>='.' && LA13_66<='<')||(LA13_66>='>' && LA13_66<='[')||(LA13_66>=']' && LA13_66<='\uFFFF'))) {s = 42;}

				else if ((LA13_66==' '||LA13_66=='-'||LA13_66=='=')) {s = 44;}

				else s = 15;

				if (s >= 0) return s;
				break;

			case 34:
				int LA13_47 = input.LA(1);

				s = -1;
				if (((LA13_47>='\u0000' && LA13_47<='\u001F')||(LA13_47>='!' && LA13_47<=',')||(LA13_47>='.' && LA13_47<='<')||(LA13_47>='>' && LA13_47<='\uFFFF'))) {s = 15;}

				else s = 73;

				if (s >= 0) return s;
				break;

			case 35:
				int LA13_55 = input.LA(1);

				s = -1;
				if (((LA13_55>='0' && LA13_55<='7'))) {s = 76;}

				else if (((LA13_55>='\u0000' && LA13_55<='\u001F')||(LA13_55>='!' && LA13_55<=',')||(LA13_55>='.' && LA13_55<='/')||(LA13_55>='8' && LA13_55<='<')||(LA13_55>='>' && LA13_55<='\uFFFF'))) {s = 15;}

				else s = 73;

				if (s >= 0) return s;
				break;

			case 36:
				int LA13_46 = input.LA(1);

				s = -1;
				if (((LA13_46>='\u0000' && LA13_46<='\u001F')||(LA13_46>='!' && LA13_46<=',')||(LA13_46>='.' && LA13_46<='<')||(LA13_46>='>' && LA13_46<='\uFFFF'))) {s = 15;}

				else s = 73;

				if (s >= 0) return s;
				break;

			case 37:
				int LA13_54 = input.LA(1);

				s = -1;
				if (((LA13_54>='0' && LA13_54<='7'))) {s = 75;}

				else if (((LA13_54>='\u0000' && LA13_54<='\u001F')||(LA13_54>='!' && LA13_54<=',')||(LA13_54>='.' && LA13_54<='/')||(LA13_54>='8' && LA13_54<='<')||(LA13_54>='>' && LA13_54<='\uFFFF'))) {s = 15;}

				else s = 73;

				if (s >= 0) return s;
				break;

			case 38:
				int LA13_45 = input.LA(1);

				s = -1;
				if (((LA13_45>='\u0000' && LA13_45<='\u001F')||(LA13_45>='!' && LA13_45<=',')||(LA13_45>='.' && LA13_45<='<')||(LA13_45>='>' && LA13_45<='\uFFFF'))) {s = 15;}

				else s = 73;

				if (s >= 0) return s;
				break;

			case 39:
				int LA13_63 = input.LA(1);

				s = -1;
				if ((LA13_63=='\"')) {s = 43;}

				else if ((LA13_63=='\\')) {s = 41;}

				else if (((LA13_63>='\u0000' && LA13_63<='\t')||(LA13_63>='\u000B' && LA13_63<='\f')||(LA13_63>='\u000E' && LA13_63<='\u001F')||LA13_63=='!'||(LA13_63>='#' && LA13_63<=',')||(LA13_63>='.' && LA13_63<='<')||(LA13_63>='>' && LA13_63<='[')||(LA13_63>=']' && LA13_63<='\uFFFF'))) {s = 42;}

				else if ((LA13_63==' '||LA13_63=='-'||LA13_63=='=')) {s = 44;}

				else s = 15;

				if (s >= 0) return s;
				break;

			case 40:
				int LA13_71 = input.LA(1);

				s = -1;
				if (((LA13_71>='0' && LA13_71<='7'))) {s = 80;}

				else if ((LA13_71=='\"')) {s = 43;}

				else if ((LA13_71=='\\')) {s = 41;}

				else if (((LA13_71>='\u0000' && LA13_71<='\t')||(LA13_71>='\u000B' && LA13_71<='\f')||(LA13_71>='\u000E' && LA13_71<='\u001F')||LA13_71=='!'||(LA13_71>='#' && LA13_71<=',')||(LA13_71>='.' && LA13_71<='/')||(LA13_71>='8' && LA13_71<='<')||(LA13_71>='>' && LA13_71<='[')||(LA13_71>=']' && LA13_71<='\uFFFF'))) {s = 42;}

				else if ((LA13_71==' '||LA13_71=='-'||LA13_71=='=')) {s = 44;}

				else s = 15;

				if (s >= 0) return s;
				break;

			case 41:
				int LA13_80 = input.LA(1);

				s = -1;
				if (((LA13_80>='0' && LA13_80<='7'))) {s = 87;}

				else if ((LA13_80=='\"')) {s = 43;}

				else if ((LA13_80=='\\')) {s = 41;}

				else if (((LA13_80>='\u0000' && LA13_80<='\t')||(LA13_80>='\u000B' && LA13_80<='\f')||(LA13_80>='\u000E' && LA13_80<='\u001F')||LA13_80=='!'||(LA13_80>='#' && LA13_80<=',')||(LA13_80>='.' && LA13_80<='/')||(LA13_80>='8' && LA13_80<='<')||(LA13_80>='>' && LA13_80<='[')||(LA13_80>=']' && LA13_80<='\uFFFF'))) {s = 42;}

				else if ((LA13_80==' '||LA13_80=='-'||LA13_80=='=')) {s = 44;}

				else s = 15;

				if (s >= 0) return s;
				break;

			case 42:
				int LA13_62 = input.LA(1);

				s = -1;
				if ((LA13_62=='\"')) {s = 43;}

				else if ((LA13_62=='\\')) {s = 41;}

				else if (((LA13_62>='\u0000' && LA13_62<='\t')||(LA13_62>='\u000B' && LA13_62<='\f')||(LA13_62>='\u000E' && LA13_62<='\u001F')||LA13_62=='!'||(LA13_62>='#' && LA13_62<=',')||(LA13_62>='.' && LA13_62<='<')||(LA13_62>='>' && LA13_62<='[')||(LA13_62>=']' && LA13_62<='\uFFFF'))) {s = 42;}

				else if ((LA13_62==' '||LA13_62=='-'||LA13_62=='=')) {s = 44;}

				else s = 15;

				if (s >= 0) return s;
				break;

			case 43:
				int LA13_93 = input.LA(1);

				s = -1;
				if ((LA13_93=='\"')) {s = 43;}

				else if ((LA13_93=='\\')) {s = 41;}

				else if (((LA13_93>='\u0000' && LA13_93<='\t')||(LA13_93>='\u000B' && LA13_93<='\f')||(LA13_93>='\u000E' && LA13_93<='\u001F')||LA13_93=='!'||(LA13_93>='#' && LA13_93<=',')||(LA13_93>='.' && LA13_93<='<')||(LA13_93>='>' && LA13_93<='[')||(LA13_93>=']' && LA13_93<='\uFFFF'))) {s = 42;}

				else if ((LA13_93==' '||LA13_93=='-'||LA13_93=='=')) {s = 44;}

				else s = 15;

				if (s >= 0) return s;
				break;
		}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 13, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
 
	#endregion

}

} // namespace  find 
