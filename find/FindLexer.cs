//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 ./find/Find.g 2012-12-27 00:06:34

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  find 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class FindLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__24=24;
	public const int T__25=25;
	public const int AND=4;
	public const int DEPTH=5;
	public const int EQ=6;
	public const int ESC=7;
	public const int HEX_DIGIT=8;
	public const int INAME=9;
	public const int INTEGER=10;
	public const int IREGEX=11;
	public const int LPAREN=12;
	public const int NAME=13;
	public const int NOT=14;
	public const int OR=15;
	public const int REGEX=16;
	public const int RPAREN=17;
	public const int SIZE=18;
	public const int SIZEPOSTFIX=19;
	public const int STRING_LITERAL=20;
	public const int TYPE=21;
	public const int UNQOTED_LITERAL=22;
	public const int WS=23;

    // delegates
    // delegators

	public FindLexer()
	{
		OnCreated();
	}

	public FindLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public FindLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "./find/Find.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__24();
	partial void LeaveRule_T__24();

	// $ANTLR start "T__24"
	[GrammarRule("T__24")]
	private void mT__24()
	{
		EnterRule_T__24();
		EnterRule("T__24", 1);
		TraceIn("T__24", 1);
		try
		{
			int _type = T__24;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:9:7: ( 'd' )
			DebugEnterAlt(1);
			// ./find/Find.g:9:9: 'd'
			{
			DebugLocation(9, 9);
			Match('d'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__24", 1);
			LeaveRule("T__24", 1);
			LeaveRule_T__24();
		}
	}
	// $ANTLR end "T__24"

	partial void EnterRule_T__25();
	partial void LeaveRule_T__25();

	// $ANTLR start "T__25"
	[GrammarRule("T__25")]
	private void mT__25()
	{
		EnterRule_T__25();
		EnterRule("T__25", 2);
		TraceIn("T__25", 2);
		try
		{
			int _type = T__25;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:10:7: ( 'f' )
			DebugEnterAlt(1);
			// ./find/Find.g:10:9: 'f'
			{
			DebugLocation(10, 9);
			Match('f'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__25", 2);
			LeaveRule("T__25", 2);
			LeaveRule_T__25();
		}
	}
	// $ANTLR end "T__25"

	partial void EnterRule_NAME();
	partial void LeaveRule_NAME();

	// $ANTLR start "NAME"
	[GrammarRule("NAME")]
	private void mNAME()
	{
		EnterRule_NAME();
		EnterRule("NAME", 3);
		TraceIn("NAME", 3);
		try
		{
			int _type = NAME;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:46:5: ( '-name' )
			DebugEnterAlt(1);
			// ./find/Find.g:46:6: '-name'
			{
			DebugLocation(46, 6);
			Match("-name"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NAME", 3);
			LeaveRule("NAME", 3);
			LeaveRule_NAME();
		}
	}
	// $ANTLR end "NAME"

	partial void EnterRule_INAME();
	partial void LeaveRule_INAME();

	// $ANTLR start "INAME"
	[GrammarRule("INAME")]
	private void mINAME()
	{
		EnterRule_INAME();
		EnterRule("INAME", 4);
		TraceIn("INAME", 4);
		try
		{
			int _type = INAME;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:47:6: ( '-iname' )
			DebugEnterAlt(1);
			// ./find/Find.g:47:7: '-iname'
			{
			DebugLocation(47, 7);
			Match("-iname"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INAME", 4);
			LeaveRule("INAME", 4);
			LeaveRule_INAME();
		}
	}
	// $ANTLR end "INAME"

	partial void EnterRule_REGEX();
	partial void LeaveRule_REGEX();

	// $ANTLR start "REGEX"
	[GrammarRule("REGEX")]
	private void mREGEX()
	{
		EnterRule_REGEX();
		EnterRule("REGEX", 5);
		TraceIn("REGEX", 5);
		try
		{
			int _type = REGEX;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:48:6: ( '-regex' )
			DebugEnterAlt(1);
			// ./find/Find.g:48:7: '-regex'
			{
			DebugLocation(48, 7);
			Match("-regex"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("REGEX", 5);
			LeaveRule("REGEX", 5);
			LeaveRule_REGEX();
		}
	}
	// $ANTLR end "REGEX"

	partial void EnterRule_IREGEX();
	partial void LeaveRule_IREGEX();

	// $ANTLR start "IREGEX"
	[GrammarRule("IREGEX")]
	private void mIREGEX()
	{
		EnterRule_IREGEX();
		EnterRule("IREGEX", 6);
		TraceIn("IREGEX", 6);
		try
		{
			int _type = IREGEX;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:49:7: ( '-iregex' )
			DebugEnterAlt(1);
			// ./find/Find.g:49:8: '-iregex'
			{
			DebugLocation(49, 8);
			Match("-iregex"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IREGEX", 6);
			LeaveRule("IREGEX", 6);
			LeaveRule_IREGEX();
		}
	}
	// $ANTLR end "IREGEX"

	partial void EnterRule_TYPE();
	partial void LeaveRule_TYPE();

	// $ANTLR start "TYPE"
	[GrammarRule("TYPE")]
	private void mTYPE()
	{
		EnterRule_TYPE();
		EnterRule("TYPE", 7);
		TraceIn("TYPE", 7);
		try
		{
			int _type = TYPE;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:50:5: ( '-type' )
			DebugEnterAlt(1);
			// ./find/Find.g:50:6: '-type'
			{
			DebugLocation(50, 6);
			Match("-type"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TYPE", 7);
			LeaveRule("TYPE", 7);
			LeaveRule_TYPE();
		}
	}
	// $ANTLR end "TYPE"

	partial void EnterRule_SIZE();
	partial void LeaveRule_SIZE();

	// $ANTLR start "SIZE"
	[GrammarRule("SIZE")]
	private void mSIZE()
	{
		EnterRule_SIZE();
		EnterRule("SIZE", 8);
		TraceIn("SIZE", 8);
		try
		{
			int _type = SIZE;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:51:5: ( '-size' )
			DebugEnterAlt(1);
			// ./find/Find.g:51:6: '-size'
			{
			DebugLocation(51, 6);
			Match("-size"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SIZE", 8);
			LeaveRule("SIZE", 8);
			LeaveRule_SIZE();
		}
	}
	// $ANTLR end "SIZE"

	partial void EnterRule_DEPTH();
	partial void LeaveRule_DEPTH();

	// $ANTLR start "DEPTH"
	[GrammarRule("DEPTH")]
	private void mDEPTH()
	{
		EnterRule_DEPTH();
		EnterRule("DEPTH", 9);
		TraceIn("DEPTH", 9);
		try
		{
			int _type = DEPTH;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:52:6: ( '-depth' )
			DebugEnterAlt(1);
			// ./find/Find.g:52:7: '-depth'
			{
			DebugLocation(52, 7);
			Match("-depth"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DEPTH", 9);
			LeaveRule("DEPTH", 9);
			LeaveRule_DEPTH();
		}
	}
	// $ANTLR end "DEPTH"

	partial void EnterRule_LPAREN();
	partial void LeaveRule_LPAREN();

	// $ANTLR start "LPAREN"
	[GrammarRule("LPAREN")]
	private void mLPAREN()
	{
		EnterRule_LPAREN();
		EnterRule("LPAREN", 10);
		TraceIn("LPAREN", 10);
		try
		{
			int _type = LPAREN;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:53:7: ( '-(' )
			DebugEnterAlt(1);
			// ./find/Find.g:53:9: '-('
			{
			DebugLocation(53, 9);
			Match("-("); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LPAREN", 10);
			LeaveRule("LPAREN", 10);
			LeaveRule_LPAREN();
		}
	}
	// $ANTLR end "LPAREN"

	partial void EnterRule_RPAREN();
	partial void LeaveRule_RPAREN();

	// $ANTLR start "RPAREN"
	[GrammarRule("RPAREN")]
	private void mRPAREN()
	{
		EnterRule_RPAREN();
		EnterRule("RPAREN", 11);
		TraceIn("RPAREN", 11);
		try
		{
			int _type = RPAREN;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:54:7: ( '-)' )
			DebugEnterAlt(1);
			// ./find/Find.g:54:10: '-)'
			{
			DebugLocation(54, 10);
			Match("-)"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RPAREN", 11);
			LeaveRule("RPAREN", 11);
			LeaveRule_RPAREN();
		}
	}
	// $ANTLR end "RPAREN"

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 12);
		TraceIn("AND", 12);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:55:4: ( '-AND' | '-and' | '-&&' )
			int alt1=3;
			try { DebugEnterDecision(1, false);
			int LA1_0 = input.LA(1);

			if ((LA1_0=='-'))
			{
				switch (input.LA(2))
				{
				case 'A':
					{
					alt1 = 1;
					}
					break;
				case 'a':
					{
					alt1 = 2;
					}
					break;
				case '&':
					{
					alt1 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 1, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 1, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// ./find/Find.g:55:7: '-AND'
				{
				DebugLocation(55, 7);
				Match("-AND"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ./find/Find.g:55:15: '-and'
				{
				DebugLocation(55, 15);
				Match("-and"); 


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ./find/Find.g:55:24: '-&&'
				{
				DebugLocation(55, 24);
				Match("-&&"); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 12);
			LeaveRule("AND", 12);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 13);
		TraceIn("OR", 13);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:56:3: ( '-OR' | '-or' | '-||' )
			int alt2=3;
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0=='-'))
			{
				switch (input.LA(2))
				{
				case 'O':
					{
					alt2 = 1;
					}
					break;
				case 'o':
					{
					alt2 = 2;
					}
					break;
				case '|':
					{
					alt2 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 2, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// ./find/Find.g:56:6: '-OR'
				{
				DebugLocation(56, 6);
				Match("-OR"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ./find/Find.g:56:14: '-or'
				{
				DebugLocation(56, 14);
				Match("-or"); 


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ./find/Find.g:56:21: '-||'
				{
				DebugLocation(56, 21);
				Match("-||"); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 13);
			LeaveRule("OR", 13);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_NOT();
	partial void LeaveRule_NOT();

	// $ANTLR start "NOT"
	[GrammarRule("NOT")]
	private void mNOT()
	{
		EnterRule_NOT();
		EnterRule("NOT", 14);
		TraceIn("NOT", 14);
		try
		{
			int _type = NOT;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:57:5: ( '-!' | '-NOT' | '-not' )
			int alt3=3;
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if ((LA3_0=='-'))
			{
				switch (input.LA(2))
				{
				case '!':
					{
					alt3 = 1;
					}
					break;
				case 'N':
					{
					alt3 = 2;
					}
					break;
				case 'n':
					{
					alt3 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 3, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 3, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// ./find/Find.g:57:8: '-!'
				{
				DebugLocation(57, 8);
				Match("-!"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ./find/Find.g:57:15: '-NOT'
				{
				DebugLocation(57, 15);
				Match("-NOT"); 


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ./find/Find.g:57:24: '-not'
				{
				DebugLocation(57, 24);
				Match("-not"); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT", 14);
			LeaveRule("NOT", 14);
			LeaveRule_NOT();
		}
	}
	// $ANTLR end "NOT"

	partial void EnterRule_INTEGER();
	partial void LeaveRule_INTEGER();

	// $ANTLR start "INTEGER"
	[GrammarRule("INTEGER")]
	private void mINTEGER()
	{
		EnterRule_INTEGER();
		EnterRule("INTEGER", 15);
		TraceIn("INTEGER", 15);
		try
		{
			int _type = INTEGER;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:58:8: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// ./find/Find.g:58:10: ( '0' .. '9' )+
			{
			DebugLocation(58, 10);
			// ./find/Find.g:58:10: ( '0' .. '9' )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if (((LA4_0>='0' && LA4_0<='9')))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// ./find/Find.g:
					{
					DebugLocation(58, 10);
					input.Consume();


					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INTEGER", 15);
			LeaveRule("INTEGER", 15);
			LeaveRule_INTEGER();
		}
	}
	// $ANTLR end "INTEGER"

	partial void EnterRule_SIZEPOSTFIX();
	partial void LeaveRule_SIZEPOSTFIX();

	// $ANTLR start "SIZEPOSTFIX"
	[GrammarRule("SIZEPOSTFIX")]
	private void mSIZEPOSTFIX()
	{
		EnterRule_SIZEPOSTFIX();
		EnterRule("SIZEPOSTFIX", 16);
		TraceIn("SIZEPOSTFIX", 16);
		try
		{
			int _type = SIZEPOSTFIX;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:59:12: ( ( 'c' | 'w' | 'k' | 'M' | 'G' | 'b' ) )
			DebugEnterAlt(1);
			// ./find/Find.g:
			{
			DebugLocation(59, 12);
			if (input.LA(1)=='G'||input.LA(1)=='M'||(input.LA(1)>='b' && input.LA(1)<='c')||input.LA(1)=='k'||input.LA(1)=='w')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SIZEPOSTFIX", 16);
			LeaveRule("SIZEPOSTFIX", 16);
			LeaveRule_SIZEPOSTFIX();
		}
	}
	// $ANTLR end "SIZEPOSTFIX"

	partial void EnterRule_STRING_LITERAL();
	partial void LeaveRule_STRING_LITERAL();

	// $ANTLR start "STRING_LITERAL"
	[GrammarRule("STRING_LITERAL")]
	private void mSTRING_LITERAL()
	{
		EnterRule_STRING_LITERAL();
		EnterRule("STRING_LITERAL", 17);
		TraceIn("STRING_LITERAL", 17);
		try
		{
			int _type = STRING_LITERAL;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:61:2: ( '\"' ( ESC |~ ( '\"' | '\\\\' | '\\n' | '\\r' ) )* '\"' )
			DebugEnterAlt(1);
			// ./find/Find.g:61:4: '\"' ( ESC |~ ( '\"' | '\\\\' | '\\n' | '\\r' ) )* '\"'
			{
			DebugLocation(61, 4);
			Match('\"'); 
			DebugLocation(61, 8);
			// ./find/Find.g:61:8: ( ESC |~ ( '\"' | '\\\\' | '\\n' | '\\r' ) )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=3;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0=='\\'))
				{
					alt5 = 1;
				}
				else if (((LA5_0>='\u0000' && LA5_0<='\t')||(LA5_0>='\u000B' && LA5_0<='\f')||(LA5_0>='\u000E' && LA5_0<='!')||(LA5_0>='#' && LA5_0<='[')||(LA5_0>=']' && LA5_0<='\uFFFF')))
				{
					alt5 = 2;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// ./find/Find.g:61:9: ESC
					{
					DebugLocation(61, 9);
					mESC(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ./find/Find.g:61:13: ~ ( '\"' | '\\\\' | '\\n' | '\\r' )
					{
					DebugLocation(61, 13);
					input.Consume();


					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(61, 37);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING_LITERAL", 17);
			LeaveRule("STRING_LITERAL", 17);
			LeaveRule_STRING_LITERAL();
		}
	}
	// $ANTLR end "STRING_LITERAL"

	partial void EnterRule_ESC();
	partial void LeaveRule_ESC();

	// $ANTLR start "ESC"
	[GrammarRule("ESC")]
	protected void mESC()
	{
		EnterRule_ESC();
		EnterRule("ESC", 18);
		TraceIn("ESC", 18);
		try
		{
			int _type = ESC;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:74:2: ( '\\\\' ( 'n' | 'r' | 't' | 'b' | 'f' | '\"' | '\\'' | '\\\\' | ( 'u' )+ HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT | '0' .. '3' ( '0' .. '7' ( '0' .. '7' )? )? | '4' .. '7' ( '0' .. '7' )? ) )
			DebugEnterAlt(1);
			// ./find/Find.g:74:4: '\\\\' ( 'n' | 'r' | 't' | 'b' | 'f' | '\"' | '\\'' | '\\\\' | ( 'u' )+ HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT | '0' .. '3' ( '0' .. '7' ( '0' .. '7' )? )? | '4' .. '7' ( '0' .. '7' )? )
			{
			DebugLocation(74, 4);
			Match('\\'); 
			DebugLocation(75, 3);
			// ./find/Find.g:75:3: ( 'n' | 'r' | 't' | 'b' | 'f' | '\"' | '\\'' | '\\\\' | ( 'u' )+ HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT | '0' .. '3' ( '0' .. '7' ( '0' .. '7' )? )? | '4' .. '7' ( '0' .. '7' )? )
			int alt10=11;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			switch (input.LA(1))
			{
			case 'n':
				{
				alt10 = 1;
				}
				break;
			case 'r':
				{
				alt10 = 2;
				}
				break;
			case 't':
				{
				alt10 = 3;
				}
				break;
			case 'b':
				{
				alt10 = 4;
				}
				break;
			case 'f':
				{
				alt10 = 5;
				}
				break;
			case '\"':
				{
				alt10 = 6;
				}
				break;
			case '\'':
				{
				alt10 = 7;
				}
				break;
			case '\\':
				{
				alt10 = 8;
				}
				break;
			case 'u':
				{
				alt10 = 9;
				}
				break;
			case '0':
			case '1':
			case '2':
			case '3':
				{
				alt10 = 10;
				}
				break;
			case '4':
			case '5':
			case '6':
			case '7':
				{
				alt10 = 11;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// ./find/Find.g:75:5: 'n'
				{
				DebugLocation(75, 5);
				Match('n'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ./find/Find.g:76:5: 'r'
				{
				DebugLocation(76, 5);
				Match('r'); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ./find/Find.g:77:5: 't'
				{
				DebugLocation(77, 5);
				Match('t'); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ./find/Find.g:78:5: 'b'
				{
				DebugLocation(78, 5);
				Match('b'); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ./find/Find.g:79:5: 'f'
				{
				DebugLocation(79, 5);
				Match('f'); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ./find/Find.g:80:5: '\"'
				{
				DebugLocation(80, 5);
				Match('\"'); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ./find/Find.g:81:5: '\\''
				{
				DebugLocation(81, 5);
				Match('\''); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// ./find/Find.g:82:5: '\\\\'
				{
				DebugLocation(82, 5);
				Match('\\'); 

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// ./find/Find.g:83:5: ( 'u' )+ HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
				{
				DebugLocation(83, 5);
				// ./find/Find.g:83:5: ( 'u' )+
				int cnt6=0;
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if ((LA6_0=='u'))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// ./find/Find.g:83:6: 'u'
						{
						DebugLocation(83, 6);
						Match('u'); 

						}
						break;

					default:
						if (cnt6 >= 1)
							goto loop6;

						EarlyExitException eee6 = new EarlyExitException( 6, input );
						DebugRecognitionException(eee6);
						throw eee6;
					}
					cnt6++;
				}
				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(83, 12);
				mHEX_DIGIT(); 
				DebugLocation(83, 22);
				mHEX_DIGIT(); 
				DebugLocation(83, 32);
				mHEX_DIGIT(); 
				DebugLocation(83, 42);
				mHEX_DIGIT(); 

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// ./find/Find.g:84:5: '0' .. '3' ( '0' .. '7' ( '0' .. '7' )? )?
				{
				DebugLocation(84, 5);
				MatchRange('0','3'); 
				DebugLocation(85, 4);
				// ./find/Find.g:85:4: ( '0' .. '7' ( '0' .. '7' )? )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if (((LA8_0>='0' && LA8_0<='7')))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// ./find/Find.g:89:6: '0' .. '7' ( '0' .. '7' )?
					{
					DebugLocation(89, 6);
					MatchRange('0','7'); 
					DebugLocation(90, 5);
					// ./find/Find.g:90:5: ( '0' .. '7' )?
					int alt7=2;
					try { DebugEnterSubRule(7);
					try { DebugEnterDecision(7, false);
					int LA7_0 = input.LA(1);

					if (((LA7_0>='0' && LA7_0<='7')))
					{
						alt7 = 1;
					}
					} finally { DebugExitDecision(7); }
					switch (alt7)
					{
					case 1:
						DebugEnterAlt(1);
						// ./find/Find.g:
						{
						DebugLocation(90, 5);
						input.Consume();


						}
						break;

					}
					} finally { DebugExitSubRule(7); }


					}
					break;

				}
				} finally { DebugExitSubRule(8); }


				}
				break;
			case 11:
				DebugEnterAlt(11);
				// ./find/Find.g:97:5: '4' .. '7' ( '0' .. '7' )?
				{
				DebugLocation(97, 5);
				MatchRange('4','7'); 
				DebugLocation(98, 4);
				// ./find/Find.g:98:4: ( '0' .. '7' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if (((LA9_0>='0' && LA9_0<='7')))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// ./find/Find.g:
					{
					DebugLocation(98, 4);
					input.Consume();


					}
					break;

				}
				} finally { DebugExitSubRule(9); }


				}
				break;

			}
			} finally { DebugExitSubRule(10); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ESC", 18);
			LeaveRule("ESC", 18);
			LeaveRule_ESC();
		}
	}
	// $ANTLR end "ESC"

	partial void EnterRule_HEX_DIGIT();
	partial void LeaveRule_HEX_DIGIT();

	// $ANTLR start "HEX_DIGIT"
	[GrammarRule("HEX_DIGIT")]
	protected void mHEX_DIGIT()
	{
		EnterRule_HEX_DIGIT();
		EnterRule("HEX_DIGIT", 19);
		TraceIn("HEX_DIGIT", 19);
		try
		{
			int _type = HEX_DIGIT;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:111:2: ( ( '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' ) )
			DebugEnterAlt(1);
			// ./find/Find.g:
			{
			DebugLocation(111, 2);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("HEX_DIGIT", 19);
			LeaveRule("HEX_DIGIT", 19);
			LeaveRule_HEX_DIGIT();
		}
	}
	// $ANTLR end "HEX_DIGIT"

	partial void EnterRule_UNQOTED_LITERAL();
	partial void LeaveRule_UNQOTED_LITERAL();

	// $ANTLR start "UNQOTED_LITERAL"
	[GrammarRule("UNQOTED_LITERAL")]
	private void mUNQOTED_LITERAL()
	{
		EnterRule_UNQOTED_LITERAL();
		EnterRule("UNQOTED_LITERAL", 20);
		TraceIn("UNQOTED_LITERAL", 20);
		try
		{
			int _type = UNQOTED_LITERAL;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:113:2: ( (~ ( ' ' | '-' | '=' ) )* )
			DebugEnterAlt(1);
			// ./find/Find.g:113:4: (~ ( ' ' | '-' | '=' ) )*
			{
			DebugLocation(113, 4);
			// ./find/Find.g:113:4: (~ ( ' ' | '-' | '=' ) )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if (((LA11_0>='\u0000' && LA11_0<='\u001F')||(LA11_0>='!' && LA11_0<=',')||(LA11_0>='.' && LA11_0<='<')||(LA11_0>='>' && LA11_0<='\uFFFF')))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// ./find/Find.g:
					{
					DebugLocation(113, 4);
					input.Consume();


					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("UNQOTED_LITERAL", 20);
			LeaveRule("UNQOTED_LITERAL", 20);
			LeaveRule_UNQOTED_LITERAL();
		}
	}
	// $ANTLR end "UNQOTED_LITERAL"

	partial void EnterRule_EQ();
	partial void LeaveRule_EQ();

	// $ANTLR start "EQ"
	[GrammarRule("EQ")]
	private void mEQ()
	{
		EnterRule_EQ();
		EnterRule("EQ", 21);
		TraceIn("EQ", 21);
		try
		{
			int _type = EQ;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:114:4: ( '=' )
			DebugEnterAlt(1);
			// ./find/Find.g:114:6: '='
			{
			DebugLocation(114, 6);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQ", 21);
			LeaveRule("EQ", 21);
			LeaveRule_EQ();
		}
	}
	// $ANTLR end "EQ"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 22);
		TraceIn("WS", 22);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// ./find/Find.g:115:4: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ )
			DebugEnterAlt(1);
			// ./find/Find.g:115:6: ( ' ' | '\\t' | '\\r' | '\\n' )+
			{
			DebugLocation(115, 6);
			// ./find/Find.g:115:6: ( ' ' | '\\t' | '\\r' | '\\n' )+
			int cnt12=0;
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if (((LA12_0>='\t' && LA12_0<='\n')||LA12_0=='\r'||LA12_0==' '))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// ./find/Find.g:
					{
					DebugLocation(115, 6);
					input.Consume();


					}
					break;

				default:
					if (cnt12 >= 1)
						goto loop12;

					EarlyExitException eee12 = new EarlyExitException( 12, input );
					DebugRecognitionException(eee12);
					throw eee12;
				}
				cnt12++;
			}
			loop12:
				;

			} finally { DebugExitSubRule(12); }

			DebugLocation(115, 34);
			_channel = Hidden ;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 22);
			LeaveRule("WS", 22);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	public override void mTokens()
	{
		// ./find/Find.g:1:8: ( T__24 | T__25 | NAME | INAME | REGEX | IREGEX | TYPE | SIZE | DEPTH | LPAREN | RPAREN | AND | OR | NOT | INTEGER | SIZEPOSTFIX | STRING_LITERAL | ESC | HEX_DIGIT | UNQOTED_LITERAL | EQ | WS )
		int alt13=22;
		try { DebugEnterDecision(13, false);
		try
		{
			alt13 = dfa13.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(13); }
		switch (alt13)
		{
		case 1:
			DebugEnterAlt(1);
			// ./find/Find.g:1:10: T__24
			{
			DebugLocation(1, 10);
			mT__24(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// ./find/Find.g:1:16: T__25
			{
			DebugLocation(1, 16);
			mT__25(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// ./find/Find.g:1:22: NAME
			{
			DebugLocation(1, 22);
			mNAME(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// ./find/Find.g:1:27: INAME
			{
			DebugLocation(1, 27);
			mINAME(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// ./find/Find.g:1:33: REGEX
			{
			DebugLocation(1, 33);
			mREGEX(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// ./find/Find.g:1:39: IREGEX
			{
			DebugLocation(1, 39);
			mIREGEX(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// ./find/Find.g:1:46: TYPE
			{
			DebugLocation(1, 46);
			mTYPE(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// ./find/Find.g:1:51: SIZE
			{
			DebugLocation(1, 51);
			mSIZE(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// ./find/Find.g:1:56: DEPTH
			{
			DebugLocation(1, 56);
			mDEPTH(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// ./find/Find.g:1:62: LPAREN
			{
			DebugLocation(1, 62);
			mLPAREN(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// ./find/Find.g:1:69: RPAREN
			{
			DebugLocation(1, 69);
			mRPAREN(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// ./find/Find.g:1:76: AND
			{
			DebugLocation(1, 76);
			mAND(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// ./find/Find.g:1:80: OR
			{
			DebugLocation(1, 80);
			mOR(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// ./find/Find.g:1:83: NOT
			{
			DebugLocation(1, 83);
			mNOT(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// ./find/Find.g:1:87: INTEGER
			{
			DebugLocation(1, 87);
			mINTEGER(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// ./find/Find.g:1:95: SIZEPOSTFIX
			{
			DebugLocation(1, 95);
			mSIZEPOSTFIX(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// ./find/Find.g:1:107: STRING_LITERAL
			{
			DebugLocation(1, 107);
			mSTRING_LITERAL(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// ./find/Find.g:1:122: ESC
			{
			DebugLocation(1, 122);
			mESC(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// ./find/Find.g:1:126: HEX_DIGIT
			{
			DebugLocation(1, 126);
			mHEX_DIGIT(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// ./find/Find.g:1:136: UNQOTED_LITERAL
			{
			DebugLocation(1, 136);
			mUNQOTED_LITERAL(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// ./find/Find.g:1:152: EQ
			{
			DebugLocation(1, 152);
			mEQ(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// ./find/Find.g:1:155: WS
			{
			DebugLocation(1, 155);
			mWS(); 

			}
			break;

		}

	}


	#region DFA
	DFA13 dfa13;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa13 = new DFA13(this, SpecialStateTransition13);
	}

	private class DFA13 : DFA
	{
		private const string DFA13_eotS =
			"\x1\xB\x1\xE\x1\xF\x1\xFFFF\x1\x1B\x1\x1D\x2\xB\x1\x1D\x1\x2D\x1\xB\x11"+
			"\xFFFF\x1\x1B\x1\xFFFF\x2\xB\x1\x21\x1\xFFFF\x8\x3C\x1\xB\x2\x3C\x4\xFFFF"+
			"\xB\xB\x1\xFFFF\x1\xB\x2\x3C\x4\xB\x1\x3C\x4\xB\x1\x3C\x1\xB";
		private const string DFA13_eofS =
			"\x4B\xFFFF";
		private const string DFA13_minS =
			"\x1\x9\x2\x0\x1\x21\x3\x0\x1\x22\x2\x0\x1\x9\x5\xFFFF\x1\x61\x1\x6E\xA"+
			"\xFFFF\x1\x0\x1\xFFFF\x1\x22\x2\x0\x1\xFFFF\x8\x0\x1\x30\x2\x0\x4\xFFFF"+
			"\x8\x0\x1\x30\x2\x0\x1\xFFFF\x1\x30\x2\x0\x1\x30\x2\x0\x1\x30\x1\x0\x1"+
			"\x30\x1\x0\x2\x30\x2\x0";
		private const string DFA13_maxS =
			"\x1\x77\x2\xFFFF\x1\x7C\x3\xFFFF\x1\x75\x2\xFFFF\x1\x20\x5\xFFFF\x1\x6F"+
			"\x1\x72\xA\xFFFF\x1\xFFFF\x1\xFFFF\x1\x75\x2\xFFFF\x1\xFFFF\x8\xFFFF"+
			"\x1\x75\x2\xFFFF\x4\xFFFF\x8\xFFFF\x1\x75\x2\xFFFF\x1\xFFFF\x1\x66\x2"+
			"\xFFFF\x1\x66\x2\xFFFF\x1\x66\x1\xFFFF\x1\x66\x1\xFFFF\x2\x66\x2\xFFFF";
		private const string DFA13_acceptS =
			"\xB\xFFFF\x1\x14\x1\x15\x1\x16\x1\x1\x1\x2\x2\xFFFF\x1\x5\x1\x7\x1\x8"+
			"\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\xFFFF\x1\x10\x3\xFFFF\x1"+
			"\x11\xB\xFFFF\x1\x13\x1\x3\x1\x4\x1\x6\xB\xFFFF\x1\x12\xE\xFFFF";
		private const string DFA13_specialS =
			"\x1\xFFFF\x1\x1D\x1\x19\x1\xFFFF\x1\x6\x1\x23\x1\x8\x1\xFFFF\x1\x12\x1"+
			"\x24\x12\xFFFF\x1\xA\x2\xFFFF\x1\x1A\x1\x1C\x1\xFFFF\x1\xF\x1\x11\x1"+
			"\x13\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18\x1\xFFFF\x1\xE\x1\x1E\x4\xFFFF"+
			"\x1\x1\x1\x2\x1\x3\x1\x4\x1\x22\x1\x21\x1\x20\x1\x1F\x1\xFFFF\x1\x10"+
			"\x1\x7\x2\xFFFF\x1\x9\x1\x0\x1\xFFFF\x1\xC\x1\xB\x1\xFFFF\x1\x1B\x1\xFFFF"+
			"\x1\x25\x2\xFFFF\x1\xD\x1\x5}>";
		private static readonly string[] DFA13_transitionS =
			{
				"\x2\xA\x2\xFFFF\x1\xA\x12\xFFFF\x1\xD\x1\xFFFF\x1\x6\xA\xFFFF\x1\x3"+
				"\x2\xFFFF\xA\x4\x3\xFFFF\x1\xC\x3\xFFFF\x6\x9\x1\x8\x5\xFFFF\x1\x8\xE"+
				"\xFFFF\x1\x7\x4\xFFFF\x1\x9\x2\x5\x1\x1\x1\x9\x1\x2\x4\xFFFF\x1\x8\xB"+
				"\xFFFF\x1\x8",
				"\x20\xB\x1\xFFFF\xC\xB\x1\xFFFF\xF\xB\x1\xFFFF\xFFC2\xB",
				"\x20\xB\x1\xFFFF\xC\xB\x1\xFFFF\xF\xB\x1\xFFFF\xFFC2\xB",
				"\x1\x1A\x4\xFFFF\x1\x18\x1\xFFFF\x1\x16\x1\x17\x17\xFFFF\x1\x18\xC"+
				"\xFFFF\x1\x1A\x1\x19\x11\xFFFF\x1\x18\x2\xFFFF\x1\x15\x4\xFFFF\x1\x11"+
				"\x4\xFFFF\x1\x10\x1\x19\x2\xFFFF\x1\x12\x1\x14\x1\x13\x7\xFFFF\x1\x19",
				"\x20\xB\x1\xFFFF\xC\xB\x1\xFFFF\x2\xB\xA\x1C\x3\xB\x1\xFFFF\xFFC2\xB",
				"\x20\xB\x1\xFFFF\xC\xB\x1\xFFFF\xF\xB\x1\xFFFF\xFFC2\xB",
				"\xA\x1F\x1\xFFFF\x2\x1F\x1\xFFFF\x12\x1F\x1\x21\x1\x1F\x1\x20\xA\x1F"+
				"\x1\x21\xF\x1F\x1\x21\x1E\x1F\x1\x1E\xFFA3\x1F",
				"\x1\x27\x4\xFFFF\x1\x28\x8\xFFFF\x4\x2B\x4\x2C\x24\xFFFF\x1\x29\x5"+
				"\xFFFF\x1\x25\x3\xFFFF\x1\x26\x7\xFFFF\x1\x22\x3\xFFFF\x1\x23\x1\xFFFF"+
				"\x1\x24\x1\x2A",
				"\x20\xB\x1\xFFFF\xC\xB\x1\xFFFF\xF\xB\x1\xFFFF\xFFC2\xB",
				"\x20\xB\x1\xFFFF\xC\xB\x1\xFFFF\xF\xB\x1\xFFFF\xFFC2\xB",
				"\x2\xA\x2\xFFFF\x1\xA\x12\xFFFF\x1\xD",
				"",
				"",
				"",
				"",
				"",
				"\x1\x2E\xD\xFFFF\x1\x1A",
				"\x1\x2F\x3\xFFFF\x1\x30",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x20\xB\x1\xFFFF\xC\xB\x1\xFFFF\x2\xB\xA\x1C\x3\xB\x1\xFFFF\xFFC2\xB",
				"",
				"\x1\x36\x4\xFFFF\x1\x37\x8\xFFFF\x4\x3A\x4\x3B\x24\xFFFF\x1\x38\x5"+
				"\xFFFF\x1\x34\x3\xFFFF\x1\x35\x7\xFFFF\x1\x31\x3\xFFFF\x1\x32\x1\xFFFF"+
				"\x1\x33\x1\x39",
				"\xA\x1F\x1\xFFFF\x2\x1F\x1\xFFFF\x12\x1F\x1\x21\x1\x1F\x1\x20\xA\x1F"+
				"\x1\x21\xF\x1F\x1\x21\x1E\x1F\x1\x1E\xFFA3\x1F",
				"\x20\xB\x1\xFFFF\xC\xB\x1\xFFFF\xF\xB\x1\xFFFF\xFFC2\xB",
				"",
				"\x20\xB\x1\xFFFF\xC\xB\x1\xFFFF\xF\xB\x1\xFFFF\xFFC2\xB",
				"\x20\xB\x1\xFFFF\xC\xB\x1\xFFFF\xF\xB\x1\xFFFF\xFFC2\xB",
				"\x20\xB\x1\xFFFF\xC\xB\x1\xFFFF\xF\xB\x1\xFFFF\xFFC2\xB",
				"\x20\xB\x1\xFFFF\xC\xB\x1\xFFFF\xF\xB\x1\xFFFF\xFFC2\xB",
				"\x20\xB\x1\xFFFF\xC\xB\x1\xFFFF\xF\xB\x1\xFFFF\xFFC2\xB",
				"\x20\xB\x1\xFFFF\xC\xB\x1\xFFFF\xF\xB\x1\xFFFF\xFFC2\xB",
				"\x20\xB\x1\xFFFF\xC\xB\x1\xFFFF\xF\xB\x1\xFFFF\xFFC2\xB",
				"\x20\xB\x1\xFFFF\xC\xB\x1\xFFFF\xF\xB\x1\xFFFF\xFFC2\xB",
				"\xA\x3D\x7\xFFFF\x6\x3D\x1A\xFFFF\x6\x3D\xE\xFFFF\x1\x2A",
				"\x20\xB\x1\xFFFF\xC\xB\x1\xFFFF\x2\xB\x8\x3E\x5\xB\x1\xFFFF\xFFC2\xB",
				"\x20\xB\x1\xFFFF\xC\xB\x1\xFFFF\x2\xB\x8\x3F\x5\xB\x1\xFFFF\xFFC2\xB",
				"",
				"",
				"",
				"",
				"\xA\x1F\x1\xFFFF\x2\x1F\x1\xFFFF\x12\x1F\x1\x21\x1\x1F\x1\x20\xA\x1F"+
				"\x1\x21\xF\x1F\x1\x21\x1E\x1F\x1\x1E\xFFA3\x1F",
				"\xA\x1F\x1\xFFFF\x2\x1F\x1\xFFFF\x12\x1F\x1\x21\x1\x1F\x1\x20\xA\x1F"+
				"\x1\x21\xF\x1F\x1\x21\x1E\x1F\x1\x1E\xFFA3\x1F",
				"\xA\x1F\x1\xFFFF\x2\x1F\x1\xFFFF\x12\x1F\x1\x21\x1\x1F\x1\x20\xA\x1F"+
				"\x1\x21\xF\x1F\x1\x21\x1E\x1F\x1\x1E\xFFA3\x1F",
				"\xA\x1F\x1\xFFFF\x2\x1F\x1\xFFFF\x12\x1F\x1\x21\x1\x1F\x1\x20\xA\x1F"+
				"\x1\x21\xF\x1F\x1\x21\x1E\x1F\x1\x1E\xFFA3\x1F",
				"\xA\x1F\x1\xFFFF\x2\x1F\x1\xFFFF\x12\x1F\x1\x21\x1\x1F\x1\x20\xA\x1F"+
				"\x1\x21\xF\x1F\x1\x21\x1E\x1F\x1\x1E\xFFA3\x1F",
				"\xA\x1F\x1\xFFFF\x2\x1F\x1\xFFFF\x12\x1F\x1\x21\x1\x1F\x1\x20\xA\x1F"+
				"\x1\x21\xF\x1F\x1\x21\x1E\x1F\x1\x1E\xFFA3\x1F",
				"\xA\x1F\x1\xFFFF\x2\x1F\x1\xFFFF\x12\x1F\x1\x21\x1\x1F\x1\x20\xA\x1F"+
				"\x1\x21\xF\x1F\x1\x21\x1E\x1F\x1\x1E\xFFA3\x1F",
				"\xA\x1F\x1\xFFFF\x2\x1F\x1\xFFFF\x12\x1F\x1\x21\x1\x1F\x1\x20\xA\x1F"+
				"\x1\x21\xF\x1F\x1\x21\x1E\x1F\x1\x1E\xFFA3\x1F",
				"\xA\x40\x7\xFFFF\x6\x40\x1A\xFFFF\x6\x40\xE\xFFFF\x1\x39",
				"\xA\x1F\x1\xFFFF\x2\x1F\x1\xFFFF\x12\x1F\x1\x21\x1\x1F\x1\x20\xA\x1F"+
				"\x1\x21\x2\x1F\x8\x41\x5\x1F\x1\x21\x1E\x1F\x1\x1E\xFFA3\x1F",
				"\xA\x1F\x1\xFFFF\x2\x1F\x1\xFFFF\x12\x1F\x1\x21\x1\x1F\x1\x20\xA\x1F"+
				"\x1\x21\x2\x1F\x8\x42\x5\x1F\x1\x21\x1E\x1F\x1\x1E\xFFA3\x1F",
				"",
				"\xA\x43\x7\xFFFF\x6\x43\x1A\xFFFF\x6\x43",
				"\x20\xB\x1\xFFFF\xC\xB\x1\xFFFF\x2\xB\x8\x44\x5\xB\x1\xFFFF\xFFC2\xB",
				"\x20\xB\x1\xFFFF\xC\xB\x1\xFFFF\xF\xB\x1\xFFFF\xFFC2\xB",
				"\xA\x45\x7\xFFFF\x6\x45\x1A\xFFFF\x6\x45",
				"\xA\x1F\x1\xFFFF\x2\x1F\x1\xFFFF\x12\x1F\x1\x21\x1\x1F\x1\x20\xA\x1F"+
				"\x1\x21\x2\x1F\x8\x46\x5\x1F\x1\x21\x1E\x1F\x1\x1E\xFFA3\x1F",
				"\xA\x1F\x1\xFFFF\x2\x1F\x1\xFFFF\x12\x1F\x1\x21\x1\x1F\x1\x20\xA\x1F"+
				"\x1\x21\xF\x1F\x1\x21\x1E\x1F\x1\x1E\xFFA3\x1F",
				"\xA\x47\x7\xFFFF\x6\x47\x1A\xFFFF\x6\x47",
				"\x20\xB\x1\xFFFF\xC\xB\x1\xFFFF\xF\xB\x1\xFFFF\xFFC2\xB",
				"\xA\x48\x7\xFFFF\x6\x48\x1A\xFFFF\x6\x48",
				"\xA\x1F\x1\xFFFF\x2\x1F\x1\xFFFF\x12\x1F\x1\x21\x1\x1F\x1\x20\xA\x1F"+
				"\x1\x21\xF\x1F\x1\x21\x1E\x1F\x1\x1E\xFFA3\x1F",
				"\xA\x49\x7\xFFFF\x6\x49\x1A\xFFFF\x6\x49",
				"\xA\x4A\x7\xFFFF\x6\x4A\x1A\xFFFF\x6\x4A",
				"\x20\xB\x1\xFFFF\xC\xB\x1\xFFFF\xF\xB\x1\xFFFF\xFFC2\xB",
				"\xA\x1F\x1\xFFFF\x2\x1F\x1\xFFFF\x12\x1F\x1\x21\x1\x1F\x1\x20\xA\x1F"+
				"\x1\x21\xF\x1F\x1\x21\x1E\x1F\x1\x1E\xFFA3\x1F"
			};

		private static readonly short[] DFA13_eot = DFA.UnpackEncodedString(DFA13_eotS);
		private static readonly short[] DFA13_eof = DFA.UnpackEncodedString(DFA13_eofS);
		private static readonly char[] DFA13_min = DFA.UnpackEncodedStringToUnsignedChars(DFA13_minS);
		private static readonly char[] DFA13_max = DFA.UnpackEncodedStringToUnsignedChars(DFA13_maxS);
		private static readonly short[] DFA13_accept = DFA.UnpackEncodedString(DFA13_acceptS);
		private static readonly short[] DFA13_special = DFA.UnpackEncodedString(DFA13_specialS);
		private static readonly short[][] DFA13_transition;

		static DFA13()
		{
			int numStates = DFA13_transitionS.Length;
			DFA13_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA13_transition[i] = DFA.UnpackEncodedString(DFA13_transitionS[i]);
			}
		}

		public DFA13( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 13;
			this.eot = DFA13_eot;
			this.eof = DFA13_eof;
			this.min = DFA13_min;
			this.max = DFA13_max;
			this.accept = DFA13_accept;
			this.special = DFA13_special;
			this.transition = DFA13_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__24 | T__25 | NAME | INAME | REGEX | IREGEX | TYPE | SIZE | DEPTH | LPAREN | RPAREN | AND | OR | NOT | INTEGER | SIZEPOSTFIX | STRING_LITERAL | ESC | HEX_DIGIT | UNQOTED_LITERAL | EQ | WS );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition13(DFA dfa, int s, IIntStream _input)
	{
		IIntStream input = _input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA13_63 = input.LA(1);

				s = -1;
				if (((LA13_63>='\u0000' && LA13_63<='\u001F')||(LA13_63>='!' && LA13_63<=',')||(LA13_63>='.' && LA13_63<='<')||(LA13_63>='>' && LA13_63<='\uFFFF'))) {s = 11;}

				else s = 60;

				if (s >= 0) return s;
				break;

			case 1:
				int LA13_49 = input.LA(1);

				s = -1;
				if ((LA13_49=='\"')) {s = 32;}

				else if ((LA13_49=='\\')) {s = 30;}

				else if (((LA13_49>='\u0000' && LA13_49<='\t')||(LA13_49>='\u000B' && LA13_49<='\f')||(LA13_49>='\u000E' && LA13_49<='\u001F')||LA13_49=='!'||(LA13_49>='#' && LA13_49<=',')||(LA13_49>='.' && LA13_49<='<')||(LA13_49>='>' && LA13_49<='[')||(LA13_49>=']' && LA13_49<='\uFFFF'))) {s = 31;}

				else if ((LA13_49==' '||LA13_49=='-'||LA13_49=='=')) {s = 33;}

				else s = 11;

				if (s >= 0) return s;
				break;

			case 2:
				int LA13_50 = input.LA(1);

				s = -1;
				if ((LA13_50=='\"')) {s = 32;}

				else if ((LA13_50=='\\')) {s = 30;}

				else if (((LA13_50>='\u0000' && LA13_50<='\t')||(LA13_50>='\u000B' && LA13_50<='\f')||(LA13_50>='\u000E' && LA13_50<='\u001F')||LA13_50=='!'||(LA13_50>='#' && LA13_50<=',')||(LA13_50>='.' && LA13_50<='<')||(LA13_50>='>' && LA13_50<='[')||(LA13_50>=']' && LA13_50<='\uFFFF'))) {s = 31;}

				else if ((LA13_50==' '||LA13_50=='-'||LA13_50=='=')) {s = 33;}

				else s = 11;

				if (s >= 0) return s;
				break;

			case 3:
				int LA13_51 = input.LA(1);

				s = -1;
				if ((LA13_51=='\"')) {s = 32;}

				else if ((LA13_51=='\\')) {s = 30;}

				else if (((LA13_51>='\u0000' && LA13_51<='\t')||(LA13_51>='\u000B' && LA13_51<='\f')||(LA13_51>='\u000E' && LA13_51<='\u001F')||LA13_51=='!'||(LA13_51>='#' && LA13_51<=',')||(LA13_51>='.' && LA13_51<='<')||(LA13_51>='>' && LA13_51<='[')||(LA13_51>=']' && LA13_51<='\uFFFF'))) {s = 31;}

				else if ((LA13_51==' '||LA13_51=='-'||LA13_51=='=')) {s = 33;}

				else s = 11;

				if (s >= 0) return s;
				break;

			case 4:
				int LA13_52 = input.LA(1);

				s = -1;
				if ((LA13_52=='\"')) {s = 32;}

				else if ((LA13_52=='\\')) {s = 30;}

				else if (((LA13_52>='\u0000' && LA13_52<='\t')||(LA13_52>='\u000B' && LA13_52<='\f')||(LA13_52>='\u000E' && LA13_52<='\u001F')||LA13_52=='!'||(LA13_52>='#' && LA13_52<=',')||(LA13_52>='.' && LA13_52<='<')||(LA13_52>='>' && LA13_52<='[')||(LA13_52>=']' && LA13_52<='\uFFFF'))) {s = 31;}

				else if ((LA13_52==' '||LA13_52=='-'||LA13_52=='=')) {s = 33;}

				else s = 11;

				if (s >= 0) return s;
				break;

			case 5:
				int LA13_74 = input.LA(1);

				s = -1;
				if ((LA13_74=='\"')) {s = 32;}

				else if ((LA13_74=='\\')) {s = 30;}

				else if (((LA13_74>='\u0000' && LA13_74<='\t')||(LA13_74>='\u000B' && LA13_74<='\f')||(LA13_74>='\u000E' && LA13_74<='\u001F')||LA13_74=='!'||(LA13_74>='#' && LA13_74<=',')||(LA13_74>='.' && LA13_74<='<')||(LA13_74>='>' && LA13_74<='[')||(LA13_74>=']' && LA13_74<='\uFFFF'))) {s = 31;}

				else if ((LA13_74==' '||LA13_74=='-'||LA13_74=='=')) {s = 33;}

				else s = 11;

				if (s >= 0) return s;
				break;

			case 6:
				int LA13_4 = input.LA(1);

				s = -1;
				if (((LA13_4>='0' && LA13_4<='9'))) {s = 28;}

				else if (((LA13_4>='\u0000' && LA13_4<='\u001F')||(LA13_4>='!' && LA13_4<=',')||(LA13_4>='.' && LA13_4<='/')||(LA13_4>=':' && LA13_4<='<')||(LA13_4>='>' && LA13_4<='\uFFFF'))) {s = 11;}

				else s = 27;

				if (s >= 0) return s;
				break;

			case 7:
				int LA13_59 = input.LA(1);

				s = -1;
				if (((LA13_59>='0' && LA13_59<='7'))) {s = 66;}

				else if ((LA13_59=='\"')) {s = 32;}

				else if ((LA13_59=='\\')) {s = 30;}

				else if (((LA13_59>='\u0000' && LA13_59<='\t')||(LA13_59>='\u000B' && LA13_59<='\f')||(LA13_59>='\u000E' && LA13_59<='\u001F')||LA13_59=='!'||(LA13_59>='#' && LA13_59<=',')||(LA13_59>='.' && LA13_59<='/')||(LA13_59>='8' && LA13_59<='<')||(LA13_59>='>' && LA13_59<='[')||(LA13_59>=']' && LA13_59<='\uFFFF'))) {s = 31;}

				else if ((LA13_59==' '||LA13_59=='-'||LA13_59=='=')) {s = 33;}

				else s = 11;

				if (s >= 0) return s;
				break;

			case 8:
				int LA13_6 = input.LA(1);

				s = -1;
				if ((LA13_6=='\\')) {s = 30;}

				else if (((LA13_6>='\u0000' && LA13_6<='\t')||(LA13_6>='\u000B' && LA13_6<='\f')||(LA13_6>='\u000E' && LA13_6<='\u001F')||LA13_6=='!'||(LA13_6>='#' && LA13_6<=',')||(LA13_6>='.' && LA13_6<='<')||(LA13_6>='>' && LA13_6<='[')||(LA13_6>=']' && LA13_6<='\uFFFF'))) {s = 31;}

				else if ((LA13_6=='\"')) {s = 32;}

				else if ((LA13_6==' '||LA13_6=='-'||LA13_6=='=')) {s = 33;}

				else s = 11;

				if (s >= 0) return s;
				break;

			case 9:
				int LA13_62 = input.LA(1);

				s = -1;
				if (((LA13_62>='0' && LA13_62<='7'))) {s = 68;}

				else if (((LA13_62>='\u0000' && LA13_62<='\u001F')||(LA13_62>='!' && LA13_62<=',')||(LA13_62>='.' && LA13_62<='/')||(LA13_62>='8' && LA13_62<='<')||(LA13_62>='>' && LA13_62<='\uFFFF'))) {s = 11;}

				else s = 60;

				if (s >= 0) return s;
				break;

			case 10:
				int LA13_28 = input.LA(1);

				s = -1;
				if (((LA13_28>='0' && LA13_28<='9'))) {s = 28;}

				else if (((LA13_28>='\u0000' && LA13_28<='\u001F')||(LA13_28>='!' && LA13_28<=',')||(LA13_28>='.' && LA13_28<='/')||(LA13_28>=':' && LA13_28<='<')||(LA13_28>='>' && LA13_28<='\uFFFF'))) {s = 11;}

				else s = 27;

				if (s >= 0) return s;
				break;

			case 11:
				int LA13_66 = input.LA(1);

				s = -1;
				if ((LA13_66=='\"')) {s = 32;}

				else if ((LA13_66=='\\')) {s = 30;}

				else if (((LA13_66>='\u0000' && LA13_66<='\t')||(LA13_66>='\u000B' && LA13_66<='\f')||(LA13_66>='\u000E' && LA13_66<='\u001F')||LA13_66=='!'||(LA13_66>='#' && LA13_66<=',')||(LA13_66>='.' && LA13_66<='<')||(LA13_66>='>' && LA13_66<='[')||(LA13_66>=']' && LA13_66<='\uFFFF'))) {s = 31;}

				else if ((LA13_66==' '||LA13_66=='-'||LA13_66=='=')) {s = 33;}

				else s = 11;

				if (s >= 0) return s;
				break;

			case 12:
				int LA13_65 = input.LA(1);

				s = -1;
				if (((LA13_65>='0' && LA13_65<='7'))) {s = 70;}

				else if ((LA13_65=='\"')) {s = 32;}

				else if ((LA13_65=='\\')) {s = 30;}

				else if (((LA13_65>='\u0000' && LA13_65<='\t')||(LA13_65>='\u000B' && LA13_65<='\f')||(LA13_65>='\u000E' && LA13_65<='\u001F')||LA13_65=='!'||(LA13_65>='#' && LA13_65<=',')||(LA13_65>='.' && LA13_65<='/')||(LA13_65>='8' && LA13_65<='<')||(LA13_65>='>' && LA13_65<='[')||(LA13_65>=']' && LA13_65<='\uFFFF'))) {s = 31;}

				else if ((LA13_65==' '||LA13_65=='-'||LA13_65=='=')) {s = 33;}

				else s = 11;

				if (s >= 0) return s;
				break;

			case 13:
				int LA13_73 = input.LA(1);

				s = -1;
				if (((LA13_73>='\u0000' && LA13_73<='\u001F')||(LA13_73>='!' && LA13_73<=',')||(LA13_73>='.' && LA13_73<='<')||(LA13_73>='>' && LA13_73<='\uFFFF'))) {s = 11;}

				else s = 60;

				if (s >= 0) return s;
				break;

			case 14:
				int LA13_43 = input.LA(1);

				s = -1;
				if (((LA13_43>='0' && LA13_43<='7'))) {s = 62;}

				else if (((LA13_43>='\u0000' && LA13_43<='\u001F')||(LA13_43>='!' && LA13_43<=',')||(LA13_43>='.' && LA13_43<='/')||(LA13_43>='8' && LA13_43<='<')||(LA13_43>='>' && LA13_43<='\uFFFF'))) {s = 11;}

				else s = 60;

				if (s >= 0) return s;
				break;

			case 15:
				int LA13_34 = input.LA(1);

				s = -1;
				if (((LA13_34>='\u0000' && LA13_34<='\u001F')||(LA13_34>='!' && LA13_34<=',')||(LA13_34>='.' && LA13_34<='<')||(LA13_34>='>' && LA13_34<='\uFFFF'))) {s = 11;}

				else s = 60;

				if (s >= 0) return s;
				break;

			case 16:
				int LA13_58 = input.LA(1);

				s = -1;
				if (((LA13_58>='0' && LA13_58<='7'))) {s = 65;}

				else if ((LA13_58=='\"')) {s = 32;}

				else if ((LA13_58=='\\')) {s = 30;}

				else if (((LA13_58>='\u0000' && LA13_58<='\t')||(LA13_58>='\u000B' && LA13_58<='\f')||(LA13_58>='\u000E' && LA13_58<='\u001F')||LA13_58=='!'||(LA13_58>='#' && LA13_58<=',')||(LA13_58>='.' && LA13_58<='/')||(LA13_58>='8' && LA13_58<='<')||(LA13_58>='>' && LA13_58<='[')||(LA13_58>=']' && LA13_58<='\uFFFF'))) {s = 31;}

				else if ((LA13_58==' '||LA13_58=='-'||LA13_58=='=')) {s = 33;}

				else s = 11;

				if (s >= 0) return s;
				break;

			case 17:
				int LA13_35 = input.LA(1);

				s = -1;
				if (((LA13_35>='\u0000' && LA13_35<='\u001F')||(LA13_35>='!' && LA13_35<=',')||(LA13_35>='.' && LA13_35<='<')||(LA13_35>='>' && LA13_35<='\uFFFF'))) {s = 11;}

				else s = 60;

				if (s >= 0) return s;
				break;

			case 18:
				int LA13_8 = input.LA(1);

				s = -1;
				if (((LA13_8>='\u0000' && LA13_8<='\u001F')||(LA13_8>='!' && LA13_8<=',')||(LA13_8>='.' && LA13_8<='<')||(LA13_8>='>' && LA13_8<='\uFFFF'))) {s = 11;}

				else s = 29;

				if (s >= 0) return s;
				break;

			case 19:
				int LA13_36 = input.LA(1);

				s = -1;
				if (((LA13_36>='\u0000' && LA13_36<='\u001F')||(LA13_36>='!' && LA13_36<=',')||(LA13_36>='.' && LA13_36<='<')||(LA13_36>='>' && LA13_36<='\uFFFF'))) {s = 11;}

				else s = 60;

				if (s >= 0) return s;
				break;

			case 20:
				int LA13_37 = input.LA(1);

				s = -1;
				if (((LA13_37>='\u0000' && LA13_37<='\u001F')||(LA13_37>='!' && LA13_37<=',')||(LA13_37>='.' && LA13_37<='<')||(LA13_37>='>' && LA13_37<='\uFFFF'))) {s = 11;}

				else s = 60;

				if (s >= 0) return s;
				break;

			case 21:
				int LA13_38 = input.LA(1);

				s = -1;
				if (((LA13_38>='\u0000' && LA13_38<='\u001F')||(LA13_38>='!' && LA13_38<=',')||(LA13_38>='.' && LA13_38<='<')||(LA13_38>='>' && LA13_38<='\uFFFF'))) {s = 11;}

				else s = 60;

				if (s >= 0) return s;
				break;

			case 22:
				int LA13_39 = input.LA(1);

				s = -1;
				if (((LA13_39>='\u0000' && LA13_39<='\u001F')||(LA13_39>='!' && LA13_39<=',')||(LA13_39>='.' && LA13_39<='<')||(LA13_39>='>' && LA13_39<='\uFFFF'))) {s = 11;}

				else s = 60;

				if (s >= 0) return s;
				break;

			case 23:
				int LA13_40 = input.LA(1);

				s = -1;
				if (((LA13_40>='\u0000' && LA13_40<='\u001F')||(LA13_40>='!' && LA13_40<=',')||(LA13_40>='.' && LA13_40<='<')||(LA13_40>='>' && LA13_40<='\uFFFF'))) {s = 11;}

				else s = 60;

				if (s >= 0) return s;
				break;

			case 24:
				int LA13_41 = input.LA(1);

				s = -1;
				if (((LA13_41>='\u0000' && LA13_41<='\u001F')||(LA13_41>='!' && LA13_41<=',')||(LA13_41>='.' && LA13_41<='<')||(LA13_41>='>' && LA13_41<='\uFFFF'))) {s = 11;}

				else s = 60;

				if (s >= 0) return s;
				break;

			case 25:
				int LA13_2 = input.LA(1);

				s = -1;
				if (((LA13_2>='\u0000' && LA13_2<='\u001F')||(LA13_2>='!' && LA13_2<=',')||(LA13_2>='.' && LA13_2<='<')||(LA13_2>='>' && LA13_2<='\uFFFF'))) {s = 11;}

				else s = 15;

				if (s >= 0) return s;
				break;

			case 26:
				int LA13_31 = input.LA(1);

				s = -1;
				if ((LA13_31=='\"')) {s = 32;}

				else if ((LA13_31=='\\')) {s = 30;}

				else if (((LA13_31>='\u0000' && LA13_31<='\t')||(LA13_31>='\u000B' && LA13_31<='\f')||(LA13_31>='\u000E' && LA13_31<='\u001F')||LA13_31=='!'||(LA13_31>='#' && LA13_31<=',')||(LA13_31>='.' && LA13_31<='<')||(LA13_31>='>' && LA13_31<='[')||(LA13_31>=']' && LA13_31<='\uFFFF'))) {s = 31;}

				else if ((LA13_31==' '||LA13_31=='-'||LA13_31=='=')) {s = 33;}

				else s = 11;

				if (s >= 0) return s;
				break;

			case 27:
				int LA13_68 = input.LA(1);

				s = -1;
				if (((LA13_68>='\u0000' && LA13_68<='\u001F')||(LA13_68>='!' && LA13_68<=',')||(LA13_68>='.' && LA13_68<='<')||(LA13_68>='>' && LA13_68<='\uFFFF'))) {s = 11;}

				else s = 60;

				if (s >= 0) return s;
				break;

			case 28:
				int LA13_32 = input.LA(1);

				s = -1;
				if (((LA13_32>='\u0000' && LA13_32<='\u001F')||(LA13_32>='!' && LA13_32<=',')||(LA13_32>='.' && LA13_32<='<')||(LA13_32>='>' && LA13_32<='\uFFFF'))) {s = 11;}

				else s = 33;

				if (s >= 0) return s;
				break;

			case 29:
				int LA13_1 = input.LA(1);

				s = -1;
				if (((LA13_1>='\u0000' && LA13_1<='\u001F')||(LA13_1>='!' && LA13_1<=',')||(LA13_1>='.' && LA13_1<='<')||(LA13_1>='>' && LA13_1<='\uFFFF'))) {s = 11;}

				else s = 14;

				if (s >= 0) return s;
				break;

			case 30:
				int LA13_44 = input.LA(1);

				s = -1;
				if (((LA13_44>='0' && LA13_44<='7'))) {s = 63;}

				else if (((LA13_44>='\u0000' && LA13_44<='\u001F')||(LA13_44>='!' && LA13_44<=',')||(LA13_44>='.' && LA13_44<='/')||(LA13_44>='8' && LA13_44<='<')||(LA13_44>='>' && LA13_44<='\uFFFF'))) {s = 11;}

				else s = 60;

				if (s >= 0) return s;
				break;

			case 31:
				int LA13_56 = input.LA(1);

				s = -1;
				if ((LA13_56=='\"')) {s = 32;}

				else if ((LA13_56=='\\')) {s = 30;}

				else if (((LA13_56>='\u0000' && LA13_56<='\t')||(LA13_56>='\u000B' && LA13_56<='\f')||(LA13_56>='\u000E' && LA13_56<='\u001F')||LA13_56=='!'||(LA13_56>='#' && LA13_56<=',')||(LA13_56>='.' && LA13_56<='<')||(LA13_56>='>' && LA13_56<='[')||(LA13_56>=']' && LA13_56<='\uFFFF'))) {s = 31;}

				else if ((LA13_56==' '||LA13_56=='-'||LA13_56=='=')) {s = 33;}

				else s = 11;

				if (s >= 0) return s;
				break;

			case 32:
				int LA13_55 = input.LA(1);

				s = -1;
				if ((LA13_55=='\"')) {s = 32;}

				else if ((LA13_55=='\\')) {s = 30;}

				else if (((LA13_55>='\u0000' && LA13_55<='\t')||(LA13_55>='\u000B' && LA13_55<='\f')||(LA13_55>='\u000E' && LA13_55<='\u001F')||LA13_55=='!'||(LA13_55>='#' && LA13_55<=',')||(LA13_55>='.' && LA13_55<='<')||(LA13_55>='>' && LA13_55<='[')||(LA13_55>=']' && LA13_55<='\uFFFF'))) {s = 31;}

				else if ((LA13_55==' '||LA13_55=='-'||LA13_55=='=')) {s = 33;}

				else s = 11;

				if (s >= 0) return s;
				break;

			case 33:
				int LA13_54 = input.LA(1);

				s = -1;
				if ((LA13_54=='\"')) {s = 32;}

				else if ((LA13_54=='\\')) {s = 30;}

				else if (((LA13_54>='\u0000' && LA13_54<='\t')||(LA13_54>='\u000B' && LA13_54<='\f')||(LA13_54>='\u000E' && LA13_54<='\u001F')||LA13_54=='!'||(LA13_54>='#' && LA13_54<=',')||(LA13_54>='.' && LA13_54<='<')||(LA13_54>='>' && LA13_54<='[')||(LA13_54>=']' && LA13_54<='\uFFFF'))) {s = 31;}

				else if ((LA13_54==' '||LA13_54=='-'||LA13_54=='=')) {s = 33;}

				else s = 11;

				if (s >= 0) return s;
				break;

			case 34:
				int LA13_53 = input.LA(1);

				s = -1;
				if ((LA13_53=='\"')) {s = 32;}

				else if ((LA13_53=='\\')) {s = 30;}

				else if (((LA13_53>='\u0000' && LA13_53<='\t')||(LA13_53>='\u000B' && LA13_53<='\f')||(LA13_53>='\u000E' && LA13_53<='\u001F')||LA13_53=='!'||(LA13_53>='#' && LA13_53<=',')||(LA13_53>='.' && LA13_53<='<')||(LA13_53>='>' && LA13_53<='[')||(LA13_53>=']' && LA13_53<='\uFFFF'))) {s = 31;}

				else if ((LA13_53==' '||LA13_53=='-'||LA13_53=='=')) {s = 33;}

				else s = 11;

				if (s >= 0) return s;
				break;

			case 35:
				int LA13_5 = input.LA(1);

				s = -1;
				if (((LA13_5>='\u0000' && LA13_5<='\u001F')||(LA13_5>='!' && LA13_5<=',')||(LA13_5>='.' && LA13_5<='<')||(LA13_5>='>' && LA13_5<='\uFFFF'))) {s = 11;}

				else s = 29;

				if (s >= 0) return s;
				break;

			case 36:
				int LA13_9 = input.LA(1);

				s = -1;
				if (((LA13_9>='\u0000' && LA13_9<='\u001F')||(LA13_9>='!' && LA13_9<=',')||(LA13_9>='.' && LA13_9<='<')||(LA13_9>='>' && LA13_9<='\uFFFF'))) {s = 11;}

				else s = 45;

				if (s >= 0) return s;
				break;

			case 37:
				int LA13_70 = input.LA(1);

				s = -1;
				if ((LA13_70=='\"')) {s = 32;}

				else if ((LA13_70=='\\')) {s = 30;}

				else if (((LA13_70>='\u0000' && LA13_70<='\t')||(LA13_70>='\u000B' && LA13_70<='\f')||(LA13_70>='\u000E' && LA13_70<='\u001F')||LA13_70=='!'||(LA13_70>='#' && LA13_70<=',')||(LA13_70>='.' && LA13_70<='<')||(LA13_70>='>' && LA13_70<='[')||(LA13_70>=']' && LA13_70<='\uFFFF'))) {s = 31;}

				else if ((LA13_70==' '||LA13_70=='-'||LA13_70=='=')) {s = 33;}

				else s = 11;

				if (s >= 0) return s;
				break;
		}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 13, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
 
	#endregion

}

} // namespace  find 
