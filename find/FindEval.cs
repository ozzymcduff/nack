//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 ./find/FindEval.g 2012-12-26 13:15:54

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System;
using Matcher=System.Func<string,find.find.Type,bool>;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  find 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class FindEval : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "DEPTH", "EQ", "ESC", "HEX_DIGIT", "INAME", "INTEGER", "IREGEX", "LPAREN", "NAME", "NOT", "OR", "REGEX", "RPAREN", "SIZE", "STRING_LITERAL", "TYPE", "UNQOTED_LITERAL", "WS", "'G'", "'M'", "'b'", "'c'", "'d'", "'directory'", "'f'", "'file'", "'k'", "'w'"
	};
	public const int EOF=-1;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int AND=4;
	public const int DEPTH=5;
	public const int EQ=6;
	public const int ESC=7;
	public const int HEX_DIGIT=8;
	public const int INAME=9;
	public const int INTEGER=10;
	public const int IREGEX=11;
	public const int LPAREN=12;
	public const int NAME=13;
	public const int NOT=14;
	public const int OR=15;
	public const int REGEX=16;
	public const int RPAREN=17;
	public const int SIZE=18;
	public const int STRING_LITERAL=19;
	public const int TYPE=20;
	public const int UNQOTED_LITERAL=21;
	public const int WS=22;

	public FindEval(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public FindEval(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return FindEval.tokenNames; } }
	public override string GrammarFileName { get { return "./find/FindEval.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_commandline();
	partial void LeaveRule_commandline();

	// $ANTLR start "commandline"
	// ./find/FindEval.g:13:1: commandline : ( expression )* ;
	[GrammarRule("commandline")]
	private void commandline()
	{
		EnterRule_commandline();
		EnterRule("commandline", 1);
		TraceIn("commandline", 1);
		try { DebugEnterRule(GrammarFileName, "commandline");
		DebugLocation(13, 14);
		try
		{
			// ./find/FindEval.g:14:2: ( ( expression )* )
			DebugEnterAlt(1);
			// ./find/FindEval.g:14:4: ( expression )*
			{
			DebugLocation(14, 4);
			// ./find/FindEval.g:14:4: ( expression )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==AND||LA1_0==INAME||(LA1_0>=IREGEX && LA1_0<=REGEX)))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// ./find/FindEval.g:14:4: expression
					{
					DebugLocation(14, 4);
					PushFollow(Follow._expression_in_commandline48);
					expression();
					PopFollow();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("commandline", 1);
			LeaveRule("commandline", 1);
			LeaveRule_commandline();
		}
		DebugLocation(14, 14);
		} finally { DebugExitRule(GrammarFileName, "commandline"); }
		return;

	}
	// $ANTLR end "commandline"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();

	// $ANTLR start "expression"
	// ./find/FindEval.g:16:1: expression : e= expr ;
	[GrammarRule("expression")]
	private void expression()
	{
		EnterRule_expression();
		EnterRule("expression", 2);
		TraceIn("expression", 2);
		Matcher e = default(Matcher);

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(16, 20);
		try
		{
			// ./find/FindEval.g:17:2: (e= expr )
			DebugEnterAlt(1);
			// ./find/FindEval.g:17:4: e= expr
			{
			DebugLocation(17, 5);
			PushFollow(Follow._expr_in_expression60);
			e=expr();
			PopFollow();

			DebugLocation(17, 11);
			 Add(e);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expression", 2);
			LeaveRule("expression", 2);
			LeaveRule_expression();
		}
		DebugLocation(17, 20);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return;

	}
	// $ANTLR end "expression"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// ./find/FindEval.g:19:1: expr returns [Matcher value] : ( ^( NOT a= expr ) | ^( OR a= expr b= expr ) | ^( AND a= expr b= expr ) | ^( LPAREN a= expr RPAREN ) | ^( NAME EQ v= val ) | ^( INAME EQ v= val ) | ^( REGEX EQ v= val ) | ^( IREGEX EQ v= val ) );
	[GrammarRule("expr")]
	private Matcher expr()
	{
		EnterRule_expr();
		EnterRule("expr", 3);
		TraceIn("expr", 3);
		Matcher value = default(Matcher);


		Matcher a = default(Matcher);
		Matcher b = default(Matcher);
		string v = default(string);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(19, 1);
		try
		{
			// ./find/FindEval.g:20:5: ( ^( NOT a= expr ) | ^( OR a= expr b= expr ) | ^( AND a= expr b= expr ) | ^( LPAREN a= expr RPAREN ) | ^( NAME EQ v= val ) | ^( INAME EQ v= val ) | ^( REGEX EQ v= val ) | ^( IREGEX EQ v= val ) )
			int alt2=8;
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case NOT:
				{
				alt2 = 1;
				}
				break;
			case OR:
				{
				alt2 = 2;
				}
				break;
			case AND:
				{
				alt2 = 3;
				}
				break;
			case LPAREN:
				{
				alt2 = 4;
				}
				break;
			case NAME:
				{
				alt2 = 5;
				}
				break;
			case INAME:
				{
				alt2 = 6;
				}
				break;
			case REGEX:
				{
				alt2 = 7;
				}
				break;
			case IREGEX:
				{
				alt2 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// ./find/FindEval.g:20:9: ^( NOT a= expr )
				{
				DebugLocation(20, 9);
				DebugLocation(20, 11);
				Match(input,NOT,Follow._NOT_in_expr81); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(20, 16);
				PushFollow(Follow._expr_in_expr85);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(20, 23);
				value = Not(a);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ./find/FindEval.g:21:9: ^( OR a= expr b= expr )
				{
				DebugLocation(21, 9);
				DebugLocation(21, 11);
				Match(input,OR,Follow._OR_in_expr99); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(21, 15);
				PushFollow(Follow._expr_in_expr103);
				a=expr();
				PopFollow();

				DebugLocation(21, 22);
				PushFollow(Follow._expr_in_expr107);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(21, 29);
				value = Or(a,b);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ./find/FindEval.g:22:9: ^( AND a= expr b= expr )
				{
				DebugLocation(22, 9);
				DebugLocation(22, 11);
				Match(input,AND,Follow._AND_in_expr121); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(22, 16);
				PushFollow(Follow._expr_in_expr125);
				a=expr();
				PopFollow();

				DebugLocation(22, 23);
				PushFollow(Follow._expr_in_expr129);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(22, 30);
				value = And(a,b);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ./find/FindEval.g:23:9: ^( LPAREN a= expr RPAREN )
				{
				DebugLocation(23, 9);
				DebugLocation(23, 11);
				Match(input,LPAREN,Follow._LPAREN_in_expr143); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(23, 19);
				PushFollow(Follow._expr_in_expr147);
				a=expr();
				PopFollow();

				DebugLocation(23, 25);
				Match(input,RPAREN,Follow._RPAREN_in_expr149); 

				Match(input, TokenTypes.Up, null); 

				DebugLocation(23, 33);
				value = a;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ./find/FindEval.g:24:9: ^( NAME EQ v= val )
				{
				DebugLocation(24, 9);
				DebugLocation(24, 11);
				Match(input,NAME,Follow._NAME_in_expr163); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(24, 16);
				Match(input,EQ,Follow._EQ_in_expr165); 
				DebugLocation(24, 20);
				PushFollow(Follow._val_in_expr169);
				v=val();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(24, 28);
				 value = NameMatch(v,false);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ./find/FindEval.g:25:6: ^( INAME EQ v= val )
				{
				DebugLocation(25, 6);
				DebugLocation(25, 8);
				Match(input,INAME,Follow._INAME_in_expr182); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(25, 14);
				Match(input,EQ,Follow._EQ_in_expr184); 
				DebugLocation(25, 18);
				PushFollow(Follow._val_in_expr188);
				v=val();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(25, 25);
				 value = NameMatch(v,true);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ./find/FindEval.g:26:6: ^( REGEX EQ v= val )
				{
				DebugLocation(26, 6);
				DebugLocation(26, 8);
				Match(input,REGEX,Follow._REGEX_in_expr200); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(26, 14);
				Match(input,EQ,Follow._EQ_in_expr202); 
				DebugLocation(26, 18);
				PushFollow(Follow._val_in_expr206);
				v=val();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(26, 25);
				 value = RegNameMatch(v,false);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// ./find/FindEval.g:27:6: ^( IREGEX EQ v= val )
				{
				DebugLocation(27, 6);
				DebugLocation(27, 8);
				Match(input,IREGEX,Follow._IREGEX_in_expr218); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(27, 15);
				Match(input,EQ,Follow._EQ_in_expr220); 
				DebugLocation(27, 19);
				PushFollow(Follow._val_in_expr224);
				v=val();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(27, 25);
				 value = RegNameMatch(v,true);

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 3);
			LeaveRule("expr", 3);
			LeaveRule_expr();
		}
		DebugLocation(28, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"

	partial void EnterRule_val();
	partial void LeaveRule_val();

	// $ANTLR start "val"
	// ./find/FindEval.g:30:1: val returns [string value] : (q= STRING_LITERAL |v= UNQOTED_LITERAL );
	[GrammarRule("val")]
	private string val()
	{
		EnterRule_val();
		EnterRule("val", 4);
		TraceIn("val", 4);
		string value = default(string);


		CommonTree q = default(CommonTree);
		CommonTree v = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "val");
		DebugLocation(30, 37);
		try
		{
			// ./find/FindEval.g:31:2: (q= STRING_LITERAL |v= UNQOTED_LITERAL )
			int alt3=2;
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if ((LA3_0==STRING_LITERAL))
			{
				alt3 = 1;
			}
			else if ((LA3_0==UNQOTED_LITERAL))
			{
				alt3 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 3, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// ./find/FindEval.g:31:4: q= STRING_LITERAL
				{
				DebugLocation(31, 5);
				q=(CommonTree)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_val244); 
				DebugLocation(31, 21);
				 value = q.Text.Substring(1,q.Text.Length-2);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ./find/FindEval.g:32:4: v= UNQOTED_LITERAL
				{
				DebugLocation(32, 5);
				v=(CommonTree)Match(input,UNQOTED_LITERAL,Follow._UNQOTED_LITERAL_in_val253); 
				DebugLocation(32, 22);
				value =v.Text;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("val", 4);
			LeaveRule("val", 4);
			LeaveRule_val();
		}
		DebugLocation(32, 37);
		} finally { DebugExitRule(GrammarFileName, "val"); }
		return value;

	}
	// $ANTLR end "val"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _expression_in_commandline48 = new BitSet(new ulong[]{0x1FA12UL});
		public static readonly BitSet _expr_in_expression60 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_expr81 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr85 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _OR_in_expr99 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr103 = new BitSet(new ulong[]{0x1FA10UL});
		public static readonly BitSet _expr_in_expr107 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _AND_in_expr121 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr125 = new BitSet(new ulong[]{0x1FA10UL});
		public static readonly BitSet _expr_in_expr129 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LPAREN_in_expr143 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr147 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _RPAREN_in_expr149 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NAME_in_expr163 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _EQ_in_expr165 = new BitSet(new ulong[]{0x280000UL});
		public static readonly BitSet _val_in_expr169 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INAME_in_expr182 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _EQ_in_expr184 = new BitSet(new ulong[]{0x280000UL});
		public static readonly BitSet _val_in_expr188 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _REGEX_in_expr200 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _EQ_in_expr202 = new BitSet(new ulong[]{0x280000UL});
		public static readonly BitSet _val_in_expr206 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IREGEX_in_expr218 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _EQ_in_expr220 = new BitSet(new ulong[]{0x280000UL});
		public static readonly BitSet _val_in_expr224 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _STRING_LITERAL_in_val244 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UNQOTED_LITERAL_in_val253 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  find 
